{"version":3,"sources":["../../../src/mockApi/mocks.ts","../../../../src/components/Button/Button.tsx","../../src/friends.ts","../../../src/api/fetchJSON.ts","../../../../src/components/FriendsList/FriendsList.tsx","../../../src/api/useApi.ts","logo.svg","App.tsx","index.tsx","../../../src/mockApi/mockApi.ts"],"names":["mocks","mockSwitches","searchParams","URLSearchParams","window","location","search","Object","fromEntries","entries","filter","name","map","value","split","getInitialMockSwitches","keys","length","registerApiMocks","newMocks","getMocks","getMockSwitch","Button","children","onClick","primary","secondary","type","className","async","getFriends","url","init","method","headers","body","ajax","toPromise","response","error","ajaxError","message","status","fetchJSON","FriendsList","friends","fetcher","data","setData","setError","isLoading","setIsLoading","result","args","then","catch","finally","assign","useApi","fetch","firstName","lastName","friend","join","key","App","src","logo","alt","href","target","rel","app","ReactDOM","render","StrictMode","document","getElementById","createMockResponse","mock","match","delay","mockError","mockHTML","responseBody","callback","pathname","JSON","parse","params","getParams","query","getQuery","statusCode","delayMs","enable","Promise","resolve","setTimeout","stringify","findMatchingMock","regexp","path","find","test","exec","reduce","acc","val","i","prop","undefined","forEach","Array","isArray"],"mappings":"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","file":"static/js/main.5d13ebdc.chunk.js","sourcesContent":["import { Mock } from './types';\r\n\r\nlet mocks: Mock[] = [];\r\nconst mockSwitches = getInitialMockSwitches();\r\nconst hasInitialMockSwitches = !!Object.keys(mockSwitches).length;\r\n\r\nexport function registerApiMocks(newMocks: Mock[]): void {\r\n  mocks = [...mocks, ...newMocks];\r\n}\r\n\r\nexport function getMocks(): Mock[] {\r\n  return mocks;\r\n}\r\n\r\nfunction getInitialMockSwitches(): Record<string, string> {\r\n  const searchParams = new URLSearchParams(window.location.search);\r\n  return Object.fromEntries(\r\n    [...searchParams.entries()]\r\n      .filter(([name]) => name === 'mock')\r\n      .map(([, value]) => value.split('--'))\r\n  ) as Record<string, string>;\r\n}\r\n\r\nexport function setMockSwitch(name: string, value: string): void {\r\n  if (hasInitialMockSwitches) {\r\n    return;\r\n  }\r\n\r\n  mockSwitches[name] = value;\r\n}\r\n\r\nexport function getMockSwitch(name: string): string {\r\n  return mockSwitches[name];\r\n}\r\n","import classNames from \"classnames\";\r\nimport React, { FC } from \"react\";\r\nimport styles from \"./Button.module.scss\";\r\n\r\nexport type ButtonProps = {\r\n  /**\r\n   * Simple click handler\r\n   */\r\n  onClick?: () => void;\r\n\r\n  /**\r\n   * Is primary?\r\n   */\r\n  primary?: boolean;\r\n\r\n  /**\r\n   * default is false\r\n   */\r\n  \r\n  secondary?: boolean;\r\n};\r\n\r\nexport const Button: FC<ButtonProps> = ({\r\n  children,\r\n  onClick,\r\n  primary,\r\n  secondary,\r\n}) => (\r\n  <button\r\n    type=\"button\"\r\n    onClick={onClick}\r\n    className={classNames({\r\n      [styles.primary]: primary,\r\n      [styles.secondary]: secondary,\r\n    })}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n","import { fetchJSON } from 'core';\r\n\r\nexport type Friend = {\r\n  firstName: string;\r\n  lastName: string;\r\n};\r\n\r\nexport async function getFriends(): Promise<Friend[]> {\r\n  return await fetchJSON<Friend[]>('/api/friends');\r\n}\r\n","import { ajax, AjaxError } from 'rxjs/ajax';\r\nimport { ApiError, ApiErrorResponse } from './types';\r\n\r\nexport async function fetchJSON<T>(\r\n  url: string,\r\n  init: {\r\n    method?: string;\r\n    headers?: Record<string, string>;\r\n    body?: Record<string, unknown>;\r\n  } = {}\r\n): Promise<T> {\r\n  const { method, headers, body } = init;\r\n  try {\r\n    const result = await ajax({\r\n      url,\r\n      ...(method && { method }),\r\n      ...(body && { body }),\r\n      headers: {\r\n        ...headers,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }).toPromise();\r\n\r\n    return result.response as T;\r\n  } catch (error) {\r\n    const ajaxError = error as AjaxError;\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw {\r\n      message: ajaxError.message,\r\n      response: ajaxError.response as ApiErrorResponse,\r\n      status: ajaxError.status,\r\n    } as ApiError;\r\n  }\r\n}\r\n","import { useEffect } from 'react';\r\nimport React, { FC } from 'react';\r\nimport { getFriends } from 'friends-api';\r\nimport { useApi } from 'core';\r\n\r\nexport const FriendsList: FC = () => {\r\n  const friends = useApi(getFriends);\r\n\r\n  useEffect(() => {\r\n    friends.fetch();\r\n  }, [friends]);\r\n\r\n  if (friends.error) {\r\n    const message = `${friends.error.response?.error?.message || ''}. Status: ${\r\n      friends.error.status || ''\r\n    }`;\r\n    return <span>{message}</span>;\r\n  }\r\n\r\n  if (friends.isLoading) {\r\n    return <span>{'Loading...'}</span>;\r\n  }\r\n\r\n  if (!friends.data?.length) {\r\n    return <span>{'No friends found :('}</span>;\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {friends.data.map(({ firstName, lastName }) => {\r\n        const friend = [firstName, lastName].join(' ');\r\n        return (\r\n          <li key={friend} data-name=\"name\">\r\n            {friend}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","import { useState, useMemo } from 'react';\r\nimport { ApiError } from './types';\r\n\r\ntype Fetcher<A extends unknown[], T> = (...args: A) => Promise<T>;\r\n\r\ntype UseApiResult<A extends unknown[], T> = {\r\n  fetch: (...args: A) => void;\r\n  data?: T;\r\n  error?: ApiError;\r\n  isLoading: boolean;\r\n};\r\n\r\nexport function useApi<A extends unknown[], T>(\r\n  fetcher: Fetcher<A, T>\r\n): UseApiResult<A, T> {\r\n  const [data, setData] = useState<T>();\r\n  const [error, setError] = useState<ApiError>();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const result = useMemo(\r\n    () => ({\r\n      fetch(...args: A) {\r\n        setIsLoading(true);\r\n        fetcher(...args)\r\n          .then(setData)\r\n          .catch(setError)\r\n          .finally(() => setIsLoading(false));\r\n      },\r\n    }),\r\n    [fetcher]\r\n  );\r\n\r\n  return Object.assign(result, { data, error, isLoading });\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React, { FC } from 'react';\r\nimport { Button, FriendsList } from 'ui-lib';\r\nimport './App.css';\r\nimport logo from './logo.svg';\r\n\r\nconst App: FC = () => (\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <p>\r\n        Edit <code>src/App.tsx</code> and save to reload.\r\n      </p>\r\n      <a\r\n        className=\"App-link\"\r\n        href=\"https://reactjs.org\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <Button primary>Learn React</Button>\r\n        <FriendsList />\r\n      </a>\r\n    </header>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { setupApiMocks } from 'ui-lib';\r\nimport { WaitForMockApi } from 'dev-tools';\r\n\r\nlet app = <App />;\r\n\r\nif (process.env.REACT_APP_USE_MOCK_API === 'true') {\r\n  setupApiMocks();\r\n\r\n  app = <WaitForMockApi>{app}</WaitForMockApi>;\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>{app}</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","import { MockMethod, MockWithRegexp } from './types';\r\nimport { Key, pathToRegexp } from 'path-to-regexp';\r\nimport { getMocks } from './mocks';\r\n\r\nexport async function createMockResponse({\r\n  mock,\r\n  match,\r\n  url,\r\n  method,\r\n  body,\r\n  headers,\r\n}: {\r\n  mock: MockWithRegexp;\r\n  match: RegExpExecArray;\r\n  url: URL;\r\n  method: MockMethod;\r\n  body: string;\r\n  headers: Record<string, string | string[]>;\r\n}): Promise<{ body: string; status: number }> {\r\n  let status = 200;\r\n  let delay: number | undefined;\r\n  let mockError = false;\r\n  let mockHTML = false;\r\n  let responseBody = await mock.callback(\r\n    {\r\n      url: url.pathname,\r\n      method,\r\n      headers,\r\n      body: body && (JSON.parse(body) as unknown),\r\n      params: getParams(match, mock),\r\n      query: getQuery(url.searchParams),\r\n    },\r\n    {\r\n      status(statusCode: number) {\r\n        status = statusCode;\r\n      },\r\n      delay(delayMs: number) {\r\n        delay = delayMs;\r\n      },\r\n      mockError(enable: boolean) {\r\n        mockError = enable;\r\n      },\r\n      mockHTML(enable: boolean) {\r\n        mockHTML = enable;\r\n      },\r\n    }\r\n  );\r\n\r\n  if (mockError) {\r\n    responseBody = {\r\n      error: { message: \"We couldn't process your request at this time\" },\r\n    };\r\n  }\r\n\r\n  if (delay) {\r\n    await new Promise((resolve) => window.setTimeout(resolve, delay));\r\n  }\r\n\r\n  return {\r\n    body: mockHTML\r\n      ? '<html></html>'\r\n      : ((responseBody && JSON.stringify(responseBody)) as string),\r\n    status: mockError ? 500 : status,\r\n  };\r\n}\r\n\r\nexport function findMatchingMock(\r\n  url: URL,\r\n  method: string\r\n): { match: RegExpExecArray | null; mock: MockWithRegexp | null } {\r\n  const mock = getMocks()\r\n    .map((mock) => {\r\n      const keys: Key[] = [];\r\n      const regexp = pathToRegexp(mock.path, keys);\r\n\r\n      return {\r\n        regexp,\r\n        keys: keys.map((key) => key.name),\r\n        ...mock,\r\n      };\r\n    })\r\n    .find(\r\n      (mock) =>\r\n        mock.regexp.test(url.pathname) && (mock.method || 'GET') === method\r\n    ) as MockWithRegexp;\r\n  const match = mock && mock.regexp.exec(url.pathname);\r\n  return { match, mock };\r\n}\r\n\r\nfunction getParams(\r\n  match: RegExpExecArray,\r\n  mock: MockWithRegexp\r\n): Record<string, string> {\r\n  return match.reduce((acc, val, i) => {\r\n    const prop = mock.keys[i - 1];\r\n\r\n    if (!prop) {\r\n      return acc;\r\n    }\r\n\r\n    if (val !== undefined || !(prop in acc)) {\r\n      acc[prop] = val;\r\n    }\r\n\r\n    return acc;\r\n  }, {} as Record<string, string>);\r\n}\r\n\r\nfunction getQuery(\r\n  searchParams: URLSearchParams\r\n): Record<string, string | string[]> {\r\n  const query = {} as Record<string, string | string[]>;\r\n\r\n  searchParams.forEach((value, name) => {\r\n    if (Array.isArray(query[name])) {\r\n      query[name] = [...query[name], value];\r\n      return;\r\n    }\r\n\r\n    if (query[name]) {\r\n      query[name] = [query[name] as string, value];\r\n      return;\r\n    }\r\n\r\n    query[name] = value;\r\n  });\r\n  return query;\r\n}\r\n"],"sourceRoot":""}