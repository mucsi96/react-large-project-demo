{"version":3,"sources":["../../../../src/components/Button/Button.tsx","../../../src/mockApi/mockApi.ts","../../../../src/components/FriendsList/FriendsList.tsx","../../src/friends.ts","logo.svg","App.tsx","index.tsx"],"names":["Button","children","onClick","primary","secondary","type","className","mockSwitches","searchParams","URLSearchParams","window","location","search","Object","fromEntries","entries","filter","name","map","value","split","getInitialMockSwitches","keys","length","FriendsList","error","setError","friends","setFriends","console","log","response","fetch","ok","Error","json","getFriends","then","catch","firstName","lastName","friend","join","key","App","src","logo","alt","href","target","rel","app","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wiBAsBaA,EAA0B,EACrCC,WACAC,UACAC,UACAC,eAEA,4BACEC,KAAK,SACLH,QAASA,EACTI,UAAW,IAAW,CACpB,CAAC,EAAOH,SAAUA,EAClB,CAAC,EAAOC,WAAYA,KAGrBH,G,qBChCL,MAAMM,E,WA8CJ,MAAMC,EAAe,IAAIC,gBAAgBC,OAAOC,SAASC,QACzD,OAAOC,OAAOC,YACZ,IAAIN,EAAaO,WACdC,QAAO,EAAEC,KAAmB,SAATA,IACnBC,KAAI,EAAE,CAAEC,KAAWA,EAAMC,MAAM,SAlDjBC,GACYR,OAAOS,KAAKf,GAAcgB,O,MCA9CC,EAAkB,KAC7B,MAAOC,EAAOC,GAAY,oBAAS,IAC5BC,EAASC,GAAc,qBAM9B,OAJA,qBAAU,M,8DCHVC,QAAQC,IAAI,wBACZ,MAAMC,QAAiBrB,OAAOsB,MAAM,gBAEpC,IAAKD,EAASE,GACZ,MAAM,IAAIC,MAAM,0BAGlB,aAAcH,EAASI,WDHrBC,GAAaC,KAAKT,GAAYU,MAAMZ,KACnC,IAECD,EACK,8BAAO,0BAGXE,EAIAA,EAAQJ,OAKX,4BACGI,EAAQT,KAAI,EAAGqB,YAAWC,eACzB,MAAMC,EAAS,CAACF,EAAWC,GAAUE,KAAK,KAC1C,OACE,wBAAIC,IAAKF,EAAM,YAAY,QACxBA,OATF,8BAAO,uBAJP,8BAAO,e,UElBH,MAA0B,iCCyB1BG,MApBC,IACd,yBAAKtC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKuC,IAAKC,EAAMxC,UAAU,WAAWyC,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACEzC,UAAU,WACV0C,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAClD,EAAD,CAAQG,SAAO,GAAf,eACA,kBAACqB,EAAD,SCZR,IAAI2B,EAAM,kBAAC,EAAD,MAQVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAAmBH,GACnBI,SAASC,eAAe,W","file":"static/js/main.0e1be596.chunk.js","sourcesContent":["import classNames from \"classnames\";\r\nimport React, { FC } from \"react\";\r\nimport styles from \"./Button.module.scss\";\r\n\r\nexport type ButtonProps = {\r\n  /**\r\n   * Simple click handler\r\n   */\r\n  onClick?: () => void;\r\n\r\n  /**\r\n   * Is primary?\r\n   */\r\n  primary?: boolean;\r\n\r\n  /**\r\n   * default is false\r\n   */\r\n  \r\n  secondary?: boolean;\r\n};\r\n\r\nexport const Button: FC<ButtonProps> = ({\r\n  children,\r\n  onClick,\r\n  primary,\r\n  secondary,\r\n}) => (\r\n  <button\r\n    type=\"button\"\r\n    onClick={onClick}\r\n    className={classNames({\r\n      [styles.primary]: primary,\r\n      [styles.secondary]: secondary,\r\n    })}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n","import { Mock, MockMethod, MockWithRegexp } from './types';\r\nimport { findMatchingMock, getParams, getQuery } from './utils';\r\n\r\nlet mocks: Mock[] = [];\r\nconst mockSwitches = getInitialMockSwitches();\r\nconst hasInitialMockSwitches = !!Object.keys(mockSwitches).length;\r\n\r\ntype RawRequest = {\r\n  url: string;\r\n  method: MockMethod;\r\n  body: string;\r\n  headers: Record<string, string | string[]>;\r\n};\r\n\r\nexport async function enableMockApi(): Promise<void> {\r\n  navigator.serviceWorker\r\n    .register('mockApiServiceWorker.js', { scope: './' })\r\n    .catch((err) => console.error('error registering sw', err));\r\n\r\n  await new Promise<void>((resolve) => {\r\n    navigator.serviceWorker.onmessage = ({\r\n      data,\r\n    }: {\r\n      data?: { type?: string };\r\n    }) => {\r\n      if (data && data.type === 'READY') {\r\n        console.log('SW is ready. Registered mocks', mocks);\r\n        resolve();\r\n      }\r\n    };\r\n  });\r\n\r\n  navigator.serviceWorker.onmessage = ({\r\n    data,\r\n    ports,\r\n  }: {\r\n    data?: { type?: string; request: RawRequest };\r\n    ports: ReadonlyArray<MessagePort>;\r\n  }) => {\r\n    if (data && data.type === 'REQUEST') {\r\n      return handleRequest({ ...data.request, port: ports[0], mocks });\r\n    }\r\n  };\r\n}\r\n\r\nexport function registerApiMocks(newMocks: Mock[]): void {\r\n  mocks = [...mocks, ...newMocks];\r\n}\r\n\r\nexport function getInitialMockSwitches(): Record<string, string> {\r\n  const searchParams = new URLSearchParams(window.location.search);\r\n  return Object.fromEntries(\r\n    [...searchParams.entries()]\r\n      .filter(([name]) => name === 'mock')\r\n      .map(([, value]) => value.split('--'))\r\n  ) as Record<string, string>;\r\n}\r\n\r\nexport function setMockSwitch(name: string, value: string): void {\r\n  if (hasInitialMockSwitches) {\r\n    return;\r\n  }\r\n\r\n  mockSwitches[name] = value;\r\n}\r\n\r\nexport function getMockSwitch(name: string): string {\r\n  return mockSwitches[name];\r\n}\r\n\r\nasync function handleRequest({\r\n  url: fullUrl,\r\n  method,\r\n  body,\r\n  headers,\r\n  port,\r\n  mocks,\r\n}: {\r\n  url: string;\r\n  method: MockMethod;\r\n  body: string;\r\n  headers: Record<string, string | string[]>;\r\n  port: MessagePort;\r\n  mocks: Mock[];\r\n}) {\r\n  const url = new URL(fullUrl);\r\n  const { match, mock } = findMatchingMock(mocks, url, method);\r\n\r\n  if (!match || !mock) {\r\n    return port.postMessage({\r\n      type: 'MOCK_NOT_FOUND',\r\n    });\r\n  }\r\n\r\n  const response = await createMockResponse({\r\n    mock,\r\n    match,\r\n    method,\r\n    headers,\r\n    url,\r\n    body,\r\n  });\r\n\r\n  port.postMessage({\r\n    response,\r\n    type: 'MOCK_SUCCESS',\r\n  });\r\n}\r\n\r\nexport async function createMockResponse({\r\n  mock,\r\n  match,\r\n  url,\r\n  method,\r\n  body,\r\n  headers,\r\n}: {\r\n  mock: MockWithRegexp;\r\n  match: RegExpExecArray;\r\n  url: URL;\r\n  method: MockMethod;\r\n  body: string;\r\n  headers: Record<string, string | string[]>;\r\n}): Promise<{ body: unknown; status: number }> {\r\n  let status = 200;\r\n  let delay: number | undefined;\r\n  let mockError = false;\r\n  let mockHTML = false;\r\n  let responseBody = await mock.callback(\r\n    {\r\n      url: url.pathname,\r\n      method,\r\n      headers,\r\n      body: body && (JSON.parse(body) as unknown),\r\n      params: getParams(match, mock),\r\n      query: getQuery(url.searchParams),\r\n    },\r\n    {\r\n      status(statusCode: number) {\r\n        status = statusCode;\r\n      },\r\n      delay(delayMs: number) {\r\n        delay = delayMs;\r\n      },\r\n      mockError(enable: boolean) {\r\n        mockError = enable;\r\n      },\r\n      mockHTML(enable: boolean) {\r\n        mockHTML = enable;\r\n      },\r\n    }\r\n  );\r\n\r\n  if (mockError) {\r\n    responseBody = {\r\n      error: { message: \"We couldn't process your request at this time\" },\r\n    };\r\n  }\r\n\r\n  if (delay) {\r\n    await new Promise((resolve) => window.setTimeout(resolve, delay));\r\n  }\r\n\r\n  return {\r\n    body: mockHTML\r\n      ? '<html></html>'\r\n      : responseBody && JSON.stringify(responseBody),\r\n    status: mockError ? 500 : status,\r\n  };\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport React, { FC } from 'react';\r\nimport { Friend, getFriends } from 'friends-api';\r\n\r\nexport const FriendsList: FC = () => {\r\n  const [error, setError] = useState(false);\r\n  const [friends, setFriends] = useState<Friend[]>();\r\n\r\n  useEffect(() => {\r\n    getFriends().then(setFriends).catch(setError);\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <span>{'Failed to load friends'}</span>;\r\n  }\r\n\r\n  if (!friends) {\r\n    return <span>{'Loading...'}</span>;\r\n  }\r\n\r\n  if (!friends.length) {\r\n    return <span>{'No friends found :('}</span>;\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {friends.map(({ firstName, lastName }) => {\r\n        const friend = [firstName, lastName].join(' ');\r\n        return (\r\n          <li key={friend} data-name=\"name\">\r\n            {friend}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","export type Friend = {\r\n  firstName: string;\r\n  lastName: string;\r\n};\r\n\r\nexport async function getFriends(): Promise<Friend[]> {\r\n  console.log('fetching friends....');\r\n  const response = await window.fetch('/api/friends');\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to load friends');\r\n  }\r\n\r\n  return (await response.json()) as Friend[];\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React, { FC } from 'react';\r\nimport { Button, FriendsList } from 'ui-lib';\r\nimport './App.css';\r\nimport logo from './logo.svg';\r\n\r\nconst App: FC = () => (\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <p>\r\n        Edit <code>src/App.tsx</code> and save to reload.\r\n      </p>\r\n      <a\r\n        className=\"App-link\"\r\n        href=\"https://reactjs.org\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <Button primary>Learn React</Button>\r\n        <FriendsList />\r\n      </a>\r\n    </header>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { setupApiMocks } from 'ui-lib';\r\nimport { WaitForMockApi } from 'dev-tools';\r\n\r\nlet app = <App />;\r\n\r\nif (process.env.REACT_APP_USE_MOCK_API === 'true') {\r\n  setupApiMocks();\r\n\r\n  app = <WaitForMockApi>{app}</WaitForMockApi>;\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>{app}</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}