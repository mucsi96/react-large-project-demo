{"version":3,"sources":["../../src/mocks.ts","../../src/mockApi.ts","../../../src/api/fetchJSON.ts","../../../src/api/apiReducer.ts","../../../src/api/useApi.ts","../../../../src/components/Button/Button.tsx","../../../../src/components/Spinner/Spinner.tsx","../../src/types.ts","../../src/friends.ts","../../src/setupApiMocks.ts","../../../src/FriendsList/friendsReducer.ts","../../../src/FriendsList/FriendsList.tsx","../../../src/FriendsList/useFriends.ts","App.tsx","index.tsx"],"names":["mocks","mockSwitches","searchParams","URLSearchParams","window","location","search","Object","fromEntries","entries","filter","name","map","value","split","getInitialMockSwitches","hasInitialMockSwitches","keys","length","globalDelay","registerApiMocks","newMocks","getMocks","setMockSwitch","getMockSwitch","saveInMockDB","key","storage","JSON","parse","sessionStorage","getItem","setItem","stringify","loadFromMockDB","getMockApiDelay","async","createMockResponse","mock","match","url","method","body","headers","status","delay","mockError","mockHTML","responseBody","callback","pathname","params","getParams","query","getQuery","statusCode","delayMs","enable","error","message","Promise","resolve","setTimeout","findMatchingMock","regexp","path","find","test","exec","reduce","acc","val","i","prop","undefined","forEach","Array","isArray","fetchJSON","init","response","fetch","textResult","text","result","ok","apiReducer","state","action","type","isLoading","data","payload","fetchArgs","useApi","fetcher","dispatch","then","catch","assign","Button","children","disabled","primary","secondary","props","className","container","Spinner","FriendActions","getFriends","reference","_links","next","href","processFriend","friend","updateFriend","id","update","friends","friendsReducer","_embedded","isFavorite","isProcessing","ADD_TO_FAVORITE","notifications","notificationKey","firstName","REMOVE_FROM_FAVORITE","FriendsList","isEmpty","loadingErrorMessage","loadMore","addToFavorites","removeFromFavorites","processFriends","Date","now","toString","useFriends","lastName","image","fullName","join","src","alt","actions","onClick","info","App","app","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a031fb32.chunk.js","sourcesContent":["import { Mock } from './types';\r\n\r\nlet mocks: Mock[] = [];\r\nlet mockSwitches = getInitialMockSwitches();\r\nconst hasInitialMockSwitches = !!Object.keys(mockSwitches).length;\r\nlet globalDelay = 0;\r\n\r\nexport function registerApiMocks(newMocks: Mock[]): void {\r\n  mocks = [...mocks, ...newMocks];\r\n}\r\n\r\nexport function getMocks(): Mock[] {\r\n  return mocks;\r\n}\r\n\r\nfunction getInitialMockSwitches(): Record<string, string> {\r\n  const searchParams = new URLSearchParams(window.location.search);\r\n  return Object.fromEntries(\r\n    [...searchParams.entries()]\r\n      .filter(([name]) => name === 'mock')\r\n      .map(([, value]) => value.split('--'))\r\n  ) as Record<string, string>;\r\n}\r\n\r\nexport function setMockSwitch(name: string, value: string): void {\r\n  if (hasInitialMockSwitches) {\r\n    return;\r\n  }\r\n\r\n  mockSwitches[name] = value;\r\n}\r\n\r\nexport function getMockSwitch(name: string): string {\r\n  return mockSwitches[name];\r\n}\r\n\r\nexport function clearMockSwitches(): void {\r\n  mockSwitches = {};\r\n}\r\n\r\nexport function saveInMockDB<T>(key: string, value: T): void {\r\n  const storage = JSON.parse(\r\n    sessionStorage.getItem('mock-api-db') || '{}'\r\n  ) as Record<string, T>;\r\n\r\n  sessionStorage.setItem(\r\n    'mock-api-db',\r\n    JSON.stringify({ ...storage, [key]: value })\r\n  );\r\n}\r\n\r\nexport function loadFromMockDB<T>(key: string): T {\r\n  const storage = JSON.parse(\r\n    sessionStorage.getItem('mock-api-db') || '{}'\r\n  ) as Record<string, T>;\r\n\r\n  return storage[key];\r\n}\r\n\r\nexport function clearMockDB(): void {\r\n  sessionStorage.removeItem('mock-api-db');\r\n}\r\n\r\nexport function setMockApiDelay(delay: number): void {\r\n  globalDelay = delay;\r\n}\r\n\r\nexport function getMockApiDelay(): number {\r\n  return globalDelay;\r\n}\r\n","import { MockMethod, MockWithRegexp } from './types';\r\nimport { Key, pathToRegexp } from 'path-to-regexp';\r\nimport { getMocks, getMockApiDelay } from './mocks';\r\n\r\nexport async function createMockResponse({\r\n  mock,\r\n  match,\r\n  url,\r\n  method,\r\n  body,\r\n  headers,\r\n}: {\r\n  mock: MockWithRegexp;\r\n  match: RegExpExecArray;\r\n  url: URL;\r\n  method: MockMethod;\r\n  body: string;\r\n  headers: Record<string, string | string[]>;\r\n}): Promise<{ body: string; status: number }> {\r\n  let status = 200;\r\n  let delay = getMockApiDelay();\r\n  let mockError = false;\r\n  let mockHTML = false;\r\n  let responseBody = await mock.callback(\r\n    {\r\n      url: url.pathname,\r\n      method,\r\n      headers,\r\n      body: body && (JSON.parse(body) as unknown),\r\n      params: getParams(match, mock),\r\n      query: getQuery(url.searchParams),\r\n    },\r\n    {\r\n      status(statusCode: number) {\r\n        status = statusCode;\r\n      },\r\n      delay(delayMs: number) {\r\n        delay = delayMs;\r\n      },\r\n      mockError(enable: boolean) {\r\n        mockError = enable;\r\n      },\r\n      mockHTML(enable: boolean) {\r\n        mockHTML = enable;\r\n      },\r\n    }\r\n  );\r\n\r\n  if (mockError) {\r\n    responseBody = {\r\n      error: { message: \"We couldn't process your request at this time\" },\r\n    };\r\n  }\r\n\r\n  if (delay) {\r\n    await new Promise((resolve) => window.setTimeout(resolve, delay));\r\n  }\r\n\r\n  return {\r\n    body: mockHTML\r\n      ? '<html></html>'\r\n      : responseBody\r\n      ? JSON.stringify(responseBody)\r\n      : '',\r\n    status: mockError ? 500 : status,\r\n  };\r\n}\r\n\r\nexport function findMatchingMock(\r\n  url: URL,\r\n  method: string\r\n): { match: RegExpExecArray | null; mock: MockWithRegexp | null } {\r\n  const mock = getMocks()\r\n    .map((mock) => {\r\n      const keys: Key[] = [];\r\n      const regexp = pathToRegexp(mock.path, keys);\r\n\r\n      return {\r\n        regexp,\r\n        keys: keys.map((key) => key.name),\r\n        ...mock,\r\n      };\r\n    })\r\n    .find(\r\n      (mock) =>\r\n        mock.regexp.test(url.pathname) && (mock.method || 'GET') === method\r\n    ) as MockWithRegexp;\r\n  const match = mock && mock.regexp.exec(url.pathname);\r\n  return { match, mock };\r\n}\r\n\r\nfunction getParams(\r\n  match: RegExpExecArray,\r\n  mock: MockWithRegexp\r\n): Record<string, string> {\r\n  return match.reduce((acc, val, i) => {\r\n    const prop = mock.keys[i - 1];\r\n\r\n    if (!prop) {\r\n      return acc;\r\n    }\r\n\r\n    if (val !== undefined || !(prop in acc)) {\r\n      acc[prop] = val;\r\n    }\r\n\r\n    return acc;\r\n  }, {} as Record<string, string>);\r\n}\r\n\r\nfunction getQuery(\r\n  searchParams: URLSearchParams\r\n): Record<string, string | string[]> {\r\n  const query = {} as Record<string, string | string[]>;\r\n\r\n  searchParams.forEach((value, name) => {\r\n    if (Array.isArray(query[name])) {\r\n      query[name] = [...query[name], value];\r\n      return;\r\n    }\r\n\r\n    if (query[name]) {\r\n      query[name] = [query[name] as string, value];\r\n      return;\r\n    }\r\n\r\n    query[name] = value;\r\n  });\r\n  return query;\r\n}\r\n","import { ApiError, ApiErrorResponse } from './types';\r\n\r\nexport async function fetchJSON<T>(\r\n  url: string,\r\n  init: {\r\n    method?: string;\r\n    headers?: Record<string, string>;\r\n    body?: Record<string, unknown>;\r\n  } = {}\r\n): Promise<T> {\r\n  const { method, headers, body } = init;\r\n  const response = await window.fetch(url, {\r\n    ...(method && { method }),\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json',\r\n    },\r\n    ...(body && { body: JSON.stringify(body) }),\r\n  });\r\n\r\n  const textResult = await response.text();\r\n  const result = (textResult ? JSON.parse(textResult) : null) as T;\r\n\r\n  if (!response.ok) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw {\r\n      message: 'Failed to fetch data',\r\n      response: result as ApiErrorResponse,\r\n      status: response.status,\r\n    } as ApiError;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { ApiState, FetchApiAction } from './types';\r\n\r\nexport function apiReducer<A extends unknown[], T>(\r\n  state: ApiState<A, T>,\r\n  action: FetchApiAction<A, T>\r\n): ApiState<A, T> {\r\n  switch (action.type) {\r\n    case 'FETCH_API_START':\r\n      return {\r\n        isLoading: true,\r\n      };\r\n    case 'FETCH_API_SUCCEED':\r\n      return {\r\n        isLoading: false,\r\n        data: action.payload,\r\n        fetchArgs: action.fetchArgs,\r\n      };\r\n    case 'FETCH_API_FAILED':\r\n      return {\r\n        isLoading: false,\r\n        error: action.error,\r\n        fetchArgs: action.fetchArgs,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { useMemo, useReducer } from 'react';\r\nimport { apiReducer } from './apiReducer';\r\nimport { ApiError, ApiState, FetchApiAction } from './types';\r\n\r\nexport type Fetcher<A extends unknown[], T> = (...args: A) => Promise<T>;\r\n\r\nexport type UseApiResult<A extends unknown[], T> = {\r\n  fetch: (...args: A) => void;\r\n  data?: T;\r\n  error?: ApiError;\r\n  isLoading: boolean;\r\n  fetchArgs?: A;\r\n};\r\n\r\nexport function useApi<A extends unknown[], T>(\r\n  fetcher: Fetcher<A, T>\r\n): UseApiResult<A, T> {\r\n  const [state, dispatch] = useReducer<\r\n    (state: ApiState<A, T>, action: FetchApiAction<A, T>) => ApiState<A, T>\r\n  >(apiReducer, {\r\n    isLoading: false,\r\n  });\r\n\r\n  const result = useMemo(\r\n    () => ({\r\n      fetch(...fetchArgs: A) {\r\n        dispatch({ type: 'FETCH_API_START' });\r\n        fetcher(...fetchArgs)\r\n          .then((payload) =>\r\n            dispatch({ type: 'FETCH_API_SUCCEED', payload, fetchArgs })\r\n          )\r\n          .catch((error: ApiError) =>\r\n            dispatch({ type: 'FETCH_API_FAILED', error, fetchArgs })\r\n          );\r\n      },\r\n    }),\r\n    [fetcher]\r\n  );\r\n\r\n  return Object.assign(result, state);\r\n}\r\n","import classNames from 'classnames';\r\nimport React, { FC } from 'react';\r\nimport styles from './Button.module.scss';\r\n\r\nexport type ButtonProps = {\r\n  disabled?: boolean;\r\n  /**\r\n   * Simple click handler\r\n   */\r\n  onClick?: () => void;\r\n\r\n  /**\r\n   * Is primary?\r\n   */\r\n  primary?: boolean;\r\n\r\n  /**\r\n   * default is false\r\n   */\r\n\r\n  secondary?: boolean;\r\n};\r\n\r\nexport const Button: FC<ButtonProps> = ({\r\n  children,\r\n  disabled,\r\n  primary,\r\n  secondary,\r\n  ...props\r\n}) => (\r\n  <button\r\n    {...props}\r\n    type=\"button\"\r\n    className={classNames(styles.container, {\r\n      [styles.primary]: primary,\r\n      [styles.secondary]: secondary,\r\n      [styles.disabled]: disabled,\r\n    })}\r\n    disabled={disabled}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n","import React, { FC } from 'react';\r\nimport styles from './Spinner.module.scss';\r\n\r\nexport const Spinner: FC = (props) => (\r\n  <div {...props} className={styles.container}>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n);\r\n","export type Link = {\r\n  href: string;\r\n  method?: string;\r\n};\r\n\r\nexport type Friend = {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  image: string;\r\n  isFavorite: boolean;\r\n  _links: Record<FriendActions, Link>;\r\n};\r\n\r\nexport type FriendsResponse = {\r\n  _embedded: Friend[];\r\n  _links: {\r\n    next?: Link;\r\n  };\r\n};\r\n\r\nexport enum FriendActions {\r\n  ADD_TO_FAVORITE = 'addToFavorite',\r\n  REMOVE_FROM_FAVORITE = 'removeFromFavorite',\r\n}\r\n","import { fetchJSON } from 'core';\r\nimport { Friend, FriendsResponse, FriendActions } from './types';\r\n\r\nexport function getFriends(\r\n  reference?: FriendsResponse\r\n): Promise<FriendsResponse> {\r\n  return fetchJSON(reference?._links.next?.href ?? '/api/friends');\r\n}\r\n\r\nexport function hasMore(reference: FriendsResponse): boolean {\r\n  return !!reference._links.next;\r\n}\r\n\r\nexport async function processFriend(\r\n  friend: Friend,\r\n  action: FriendActions\r\n): Promise<void> {\r\n  const { href, method = 'GET' } = friend._links[action];\r\n  await fetchJSON<void>(href, { method });\r\n}\r\n","import { setupApiMocks as setupFriendsApiMocks } from 'friends-api';\r\n\r\nexport function setupApiMocks(): void {\r\n  setupFriendsApiMocks();\r\n}\r\n","import { FriendActions } from 'friends-api';\r\nimport { FriendsAction, FriendsState, Friend } from './types';\r\n\r\nfunction updateFriend(\r\n  state: FriendsState,\r\n  id: string,\r\n  update: Partial<Friend>\r\n) {\r\n  return {\r\n    ...state,\r\n    friends: state.friends.map((friend) => {\r\n      if (friend.id !== id) {\r\n        return friend;\r\n      }\r\n\r\n      return {\r\n        ...friend,\r\n        ...update,\r\n      };\r\n    }),\r\n  };\r\n}\r\n\r\nexport function friendsReducer(\r\n  state: FriendsState,\r\n  action: FriendsAction\r\n): FriendsState {\r\n  switch (action.type) {\r\n    case 'LOAD_FRIENDS':\r\n      return {\r\n        ...state,\r\n        friends: [...state.friends, ...action.payload._embedded],\r\n      };\r\n    case 'ADD_TO_FAVORITES':\r\n      return updateFriend(state, action.id, {\r\n        isFavorite: true,\r\n        isProcessing: true,\r\n      });\r\n    case 'REMOVE_FROM_FAVORITES':\r\n      return updateFriend(state, action.id, {\r\n        isFavorite: false,\r\n        isProcessing: true,\r\n      });\r\n    case 'PROCESSING_SUCCEED':\r\n      return updateFriend(state, action.friend.id, {\r\n        isProcessing: false,\r\n      });\r\n    case 'PROCESSING_FAILED':\r\n      switch (action.action) {\r\n        case FriendActions.ADD_TO_FAVORITE:\r\n          return {\r\n            ...updateFriend(state, action.friend.id, {\r\n              isProcessing: false,\r\n              isFavorite: false,\r\n            }),\r\n            notifications: [\r\n              {\r\n                key: action.notificationKey,\r\n                message: `Adding ${action.friend.firstName} to favorite was not successful`,\r\n              },\r\n              ...state.notifications,\r\n            ],\r\n          };\r\n        case FriendActions.REMOVE_FROM_FAVORITE:\r\n          return {\r\n            ...updateFriend(state, action.friend.id, {\r\n              isProcessing: false,\r\n              isFavorite: true,\r\n            }),\r\n            notifications: [\r\n              {\r\n                key: action.notificationKey,\r\n                message: `Removing ${action.friend.firstName} from favorite was not successful`,\r\n              },\r\n              ...state.notifications,\r\n            ],\r\n          };\r\n        default:\r\n          return state;\r\n      }\r\n    case 'CLEAR_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(\r\n          ({ key }) => key !== action.key\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { Button, Spinner } from 'core';\r\nimport React, { FC } from 'react';\r\nimport styles from './FriendsList.module.scss';\r\nimport { useFriends } from './useFriends';\r\n\r\nexport const FriendsList: FC = () => {\r\n  const {\r\n    friends = [],\r\n    isLoading,\r\n    isEmpty,\r\n    loadingErrorMessage,\r\n    loadMore,\r\n    addToFavorites,\r\n    removeFromFavorites,\r\n    notifications,\r\n  } = useFriends();\r\n\r\n  return (\r\n    <div data-name=\"friend-list\" className={styles.container}>\r\n      {!!notifications.length && (\r\n        <div data-name=\"notifications\" className={styles.notifications}>\r\n          {notifications.map(({ key, message }) => (\r\n            <p key={key} className={styles.error}>\r\n              {message}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      )}\r\n      {friends.map((friend) => {\r\n        const { id, firstName, lastName, image } = friend;\r\n        const fullName = [firstName, lastName].join(' ');\r\n        return (\r\n          <div key={id} data-name=\"friend\" className={styles.friend}>\r\n            <img src={image} alt={fullName} />\r\n            <span data-name=\"full-name\">{fullName}</span>\r\n            <div className={styles.actions}>\r\n              {!friend.isFavorite && (\r\n                <Button\r\n                  primary\r\n                  onClick={() => addToFavorites(friend)}\r\n                  data-name=\"add-to-favorite\"\r\n                  disabled={friend.isProcessing}\r\n                >\r\n                  Add to favorite\r\n                </Button>\r\n              )}\r\n              {friend.isFavorite && (\r\n                <Button\r\n                  secondary\r\n                  onClick={() => removeFromFavorites(friend)}\r\n                  data-name=\"remove-from-favorite\"\r\n                  disabled={friend.isProcessing}\r\n                >\r\n                  Remove from favorite\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n      {(() => {\r\n        if (isLoading) {\r\n          return <Spinner />;\r\n        }\r\n\r\n        if (loadingErrorMessage) {\r\n          return (\r\n            <span data-name=\"message\" className={styles.error}>\r\n              {loadingErrorMessage}\r\n            </span>\r\n          );\r\n        }\r\n\r\n        if (isEmpty) {\r\n          return (\r\n            <span data-name=\"message\" className={styles.info}>\r\n              {'No friends found :('}\r\n            </span>\r\n          );\r\n        }\r\n\r\n        if (loadMore) {\r\n          return (\r\n            <div className={styles.loadMore}>\r\n              <Button secondary onClick={loadMore} data-name=\"load-more\">\r\n                Load more...\r\n              </Button>\r\n            </div>\r\n          );\r\n        }\r\n      })()}\r\n    </div>\r\n  );\r\n};\r\n","import { useApi } from 'core';\r\nimport { getFriends, processFriend, FriendActions, hasMore } from 'friends-api';\r\nimport { useEffect, useReducer } from 'react';\r\nimport { friendsReducer } from './friendsReducer';\r\nimport { Notification, Friend } from './types';\r\n\r\nexport function useFriends(): {\r\n  friends?: Friend[];\r\n  isLoading: boolean;\r\n  isEmpty: boolean;\r\n  loadingErrorMessage?: string;\r\n  loadMore?: () => void;\r\n  addToFavorites: (friend: Friend) => void;\r\n  removeFromFavorites: (friend: Friend) => void;\r\n  notifications: Notification[];\r\n} {\r\n  const friends = useApi(getFriends);\r\n  const processFriends = useApi(processFriend);\r\n  const [state, dispatch] = useReducer(friendsReducer, {\r\n    friends: [],\r\n    notifications: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    friends.fetch();\r\n  }, [friends]);\r\n\r\n  useEffect(() => {\r\n    if (friends.data) {\r\n      dispatch({ type: 'LOAD_FRIENDS', payload: friends.data });\r\n    }\r\n  }, [friends.data]);\r\n\r\n  useEffect(() => {\r\n    if (!processFriends.fetchArgs) {\r\n      return;\r\n    }\r\n\r\n    const [friend, action] = processFriends.fetchArgs;\r\n    const notificationKey = Date.now().toString();\r\n    dispatch({\r\n      type: processFriends.error ? 'PROCESSING_FAILED' : 'PROCESSING_SUCCEED',\r\n      friend,\r\n      action,\r\n      notificationKey,\r\n    });\r\n    setTimeout(\r\n      () => dispatch({ type: 'CLEAR_NOTIFICATION', key: notificationKey }),\r\n      3000\r\n    );\r\n  }, [processFriends.data, processFriends.error, processFriends.fetchArgs]);\r\n\r\n  return {\r\n    friends: state.friends,\r\n    isLoading: friends.isLoading,\r\n    isEmpty: !state.friends.length,\r\n    loadingErrorMessage:\r\n      friends.error &&\r\n      `${friends.error.response?.error?.message ?? ''} Status: ${\r\n        friends.error.status ?? ''\r\n      }`,\r\n    loadMore:\r\n      friends.data && hasMore(friends.data)\r\n        ? () => friends.fetch(friends.data)\r\n        : undefined,\r\n    addToFavorites: (friend: Friend) => {\r\n      dispatch({ type: 'ADD_TO_FAVORITES', id: friend.id });\r\n      processFriends.fetch(friend, FriendActions.ADD_TO_FAVORITE);\r\n    },\r\n    removeFromFavorites: (friend: Friend) => {\r\n      dispatch({ type: 'REMOVE_FROM_FAVORITES', id: friend.id });\r\n      processFriends.fetch(friend, FriendActions.REMOVE_FROM_FAVORITE);\r\n    },\r\n    notifications: state.notifications,\r\n  };\r\n}\r\n","import React, { FC } from 'react';\r\nimport { FriendsList } from 'friends';\r\nimport './App.css';\r\n\r\nconst App: FC = () => <FriendsList />;\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { setupApiMocks } from 'friends';\r\nimport { WaitForMockApi, setMockApiDelay } from 'mock-api';\r\n\r\nlet app = <App />;\r\n\r\nif (process.env.REACT_APP_USE_MOCK_API === 'true') {\r\n  setupApiMocks();\r\n  setMockApiDelay(750);\r\n\r\n  app = <WaitForMockApi>{app}</WaitForMockApi>;\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>{app}</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}