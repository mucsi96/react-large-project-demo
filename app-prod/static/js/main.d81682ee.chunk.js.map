{"version":3,"sources":["../../../../src/components/Button/Button.tsx","../../../../src/components/Spinner/Spinner.tsx","../../src/types.ts","../../../src/api/apiReducer.ts","../../../src/api/useApi.ts","../../../src/api/fetchJSON.ts","../../src/friends.ts","../../../src/FriendsList/friendsReducer.ts","../../../src/FriendsList/FriendsList.tsx","../../../src/FriendsList/useFriends.ts","App.tsx","index.tsx"],"names":["Button","children","disabled","primary","secondary","props","type","className","container","Spinner","FriendActions","apiReducer","state","action","isLoading","data","payload","fetchArgs","error","useApi","fetcher","dispatch","result","then","catch","Object","assign","async","fetchJSON","url","init","method","headers","body","response","window","fetch","JSON","stringify","textResult","text","parse","ok","message","status","getFriends","reference","_links","next","href","processFriend","friend","updateFriend","id","update","friends","map","friendsReducer","_embedded","isFavorite","isProcessing","ADD_TO_FAVORITE","notifications","key","notificationKey","firstName","REMOVE_FROM_FAVORITE","filter","FriendsList","isEmpty","loadingErrorMessage","loadMore","addToFavorites","removeFromFavorites","processFriends","Date","now","toString","setTimeout","length","undefined","useFriends","lastName","image","fullName","join","src","alt","actions","onClick","info","App","app","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d81682ee.chunk.js","sourcesContent":["import classNames from 'classnames';\r\nimport React, { FC } from 'react';\r\nimport styles from './Button.module.scss';\r\n\r\nexport type ButtonProps = {\r\n  disabled?: boolean;\r\n  /**\r\n   * Simple click handler\r\n   */\r\n  onClick?: () => void;\r\n\r\n  /**\r\n   * Is primary?\r\n   */\r\n  primary?: boolean;\r\n\r\n  /**\r\n   * default is false\r\n   */\r\n\r\n  secondary?: boolean;\r\n};\r\n\r\nexport const Button: FC<ButtonProps> = ({\r\n  children,\r\n  disabled,\r\n  primary,\r\n  secondary,\r\n  ...props\r\n}) => (\r\n  <button\r\n    {...props}\r\n    type=\"button\"\r\n    className={classNames(styles.container, {\r\n      [styles.primary]: primary,\r\n      [styles.secondary]: secondary,\r\n      [styles.disabled]: disabled,\r\n    })}\r\n    disabled={disabled}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n","import React, { FC } from 'react';\r\nimport styles from './Spinner.module.scss';\r\n\r\nexport const Spinner: FC = (props) => (\r\n  <div {...props} className={styles.container}>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n);\r\n","export type Link = {\r\n  href: string;\r\n  method?: string;\r\n};\r\n\r\nexport type Friend = {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  image: string;\r\n  isFavorite: boolean;\r\n  _links: Record<FriendActions, Link>;\r\n};\r\n\r\nexport type FriendsResponse = {\r\n  _embedded: Friend[];\r\n  _links: {\r\n    next?: Link;\r\n  };\r\n};\r\n\r\nexport enum FriendActions {\r\n  ADD_TO_FAVORITE = 'addToFavorite',\r\n  REMOVE_FROM_FAVORITE = 'removeFromFavorite',\r\n}\r\n","import { ApiState, FetchApiAction } from './types';\r\n\r\nexport function apiReducer<A extends unknown[], T>(\r\n  state: ApiState<A, T>,\r\n  action: FetchApiAction<A, T>\r\n): ApiState<A, T> {\r\n  switch (action.type) {\r\n    case 'FETCH_API_START':\r\n      return {\r\n        isLoading: true,\r\n      };\r\n    case 'FETCH_API_SUCCEED':\r\n      return {\r\n        isLoading: false,\r\n        data: action.payload,\r\n        fetchArgs: action.fetchArgs,\r\n      };\r\n    case 'FETCH_API_FAILED':\r\n      return {\r\n        isLoading: false,\r\n        error: action.error,\r\n        fetchArgs: action.fetchArgs,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { useMemo, useReducer } from 'react';\r\nimport { apiReducer } from './apiReducer';\r\nimport { ApiError, ApiState, FetchApiAction } from './types';\r\n\r\nexport type Fetcher<A extends unknown[], T> = (...args: A) => Promise<T>;\r\n\r\nexport type UseApiResult<A extends unknown[], T> = {\r\n  fetch: (...args: A) => void;\r\n  data?: T;\r\n  error?: ApiError;\r\n  isLoading: boolean;\r\n  fetchArgs?: A;\r\n};\r\n\r\nexport function useApi<A extends unknown[], T>(\r\n  fetcher: Fetcher<A, T>\r\n): UseApiResult<A, T> {\r\n  const [state, dispatch] = useReducer<\r\n    (state: ApiState<A, T>, action: FetchApiAction<A, T>) => ApiState<A, T>\r\n  >(apiReducer, {\r\n    isLoading: false,\r\n  });\r\n\r\n  const result = useMemo(\r\n    () => ({\r\n      fetch(...fetchArgs: A) {\r\n        dispatch({ type: 'FETCH_API_START' });\r\n        fetcher(...fetchArgs)\r\n          .then((payload) =>\r\n            dispatch({ type: 'FETCH_API_SUCCEED', payload, fetchArgs })\r\n          )\r\n          .catch((error: ApiError) =>\r\n            dispatch({ type: 'FETCH_API_FAILED', error, fetchArgs })\r\n          );\r\n      },\r\n    }),\r\n    [fetcher]\r\n  );\r\n\r\n  return Object.assign(result, state);\r\n}\r\n","import { ApiError, ApiErrorResponse } from './types';\r\n\r\nexport async function fetchJSON<T>(\r\n  url: string,\r\n  init: {\r\n    method?: string;\r\n    headers?: Record<string, string>;\r\n    body?: Record<string, unknown>;\r\n  } = {}\r\n): Promise<T> {\r\n  const { method, headers, body } = init;\r\n  const response = await window.fetch(url, {\r\n    ...(method && { method }),\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json',\r\n    },\r\n    ...(body && { body: JSON.stringify(body) }),\r\n  });\r\n\r\n  const textResult = await response.text();\r\n  const result = (textResult ? JSON.parse(textResult) : null) as T;\r\n\r\n  if (!response.ok) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw {\r\n      message: 'Failed to fetch data',\r\n      response: result as ApiErrorResponse,\r\n      status: response.status,\r\n    } as ApiError;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { fetchJSON } from 'core';\r\nimport { Friend, FriendsResponse, FriendActions } from './types';\r\n\r\nexport function getFriends(\r\n  reference?: FriendsResponse\r\n): Promise<FriendsResponse> {\r\n  return fetchJSON(reference?._links.next?.href ?? '/api/friends');\r\n}\r\n\r\nexport function hasMore(reference: FriendsResponse): boolean {\r\n  return !!reference._links.next;\r\n}\r\n\r\nexport async function processFriend(\r\n  friend: Friend,\r\n  action: FriendActions\r\n): Promise<void> {\r\n  const { href, method = 'GET' } = friend._links[action];\r\n  await fetchJSON<void>(href, { method });\r\n}\r\n","import { FriendActions } from 'friends-api';\r\nimport { FriendsAction, FriendsState, Friend } from './types';\r\n\r\nfunction updateFriend(\r\n  state: FriendsState,\r\n  id: string,\r\n  update: Partial<Friend>\r\n) {\r\n  return {\r\n    ...state,\r\n    friends: state.friends.map((friend) => {\r\n      if (friend.id !== id) {\r\n        return friend;\r\n      }\r\n\r\n      return {\r\n        ...friend,\r\n        ...update,\r\n      };\r\n    }),\r\n  };\r\n}\r\n\r\nexport function friendsReducer(\r\n  state: FriendsState,\r\n  action: FriendsAction\r\n): FriendsState {\r\n  switch (action.type) {\r\n    case 'LOAD_FRIENDS':\r\n      return {\r\n        ...state,\r\n        friends: [...state.friends, ...action.payload._embedded],\r\n      };\r\n    case 'ADD_TO_FAVORITES':\r\n      return updateFriend(state, action.id, {\r\n        isFavorite: true,\r\n        isProcessing: true,\r\n      });\r\n    case 'REMOVE_FROM_FAVORITES':\r\n      return updateFriend(state, action.id, {\r\n        isFavorite: false,\r\n        isProcessing: true,\r\n      });\r\n    case 'PROCESSING_SUCCEED':\r\n      return updateFriend(state, action.friend.id, {\r\n        isProcessing: false,\r\n      });\r\n    case 'PROCESSING_FAILED':\r\n      switch (action.action) {\r\n        case FriendActions.ADD_TO_FAVORITE:\r\n          return {\r\n            ...updateFriend(state, action.friend.id, {\r\n              isProcessing: false,\r\n              isFavorite: false,\r\n            }),\r\n            notifications: [\r\n              {\r\n                key: action.notificationKey,\r\n                message: `Adding ${action.friend.firstName} to favorite was not successful`,\r\n              },\r\n              ...state.notifications,\r\n            ],\r\n          };\r\n        case FriendActions.REMOVE_FROM_FAVORITE:\r\n          return {\r\n            ...updateFriend(state, action.friend.id, {\r\n              isProcessing: false,\r\n              isFavorite: true,\r\n            }),\r\n            notifications: [\r\n              {\r\n                key: action.notificationKey,\r\n                message: `Removing ${action.friend.firstName} from favorite was not successful`,\r\n              },\r\n              ...state.notifications,\r\n            ],\r\n          };\r\n        default:\r\n          return state;\r\n      }\r\n    case 'CLEAR_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(\r\n          ({ key }) => key !== action.key\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { Button, Spinner } from 'core';\r\nimport React, { FC } from 'react';\r\nimport styles from './FriendsList.module.scss';\r\nimport { useFriends } from './useFriends';\r\n\r\nexport const FriendsList: FC = () => {\r\n  const {\r\n    friends = [],\r\n    isLoading,\r\n    isEmpty,\r\n    loadingErrorMessage,\r\n    loadMore,\r\n    addToFavorites,\r\n    removeFromFavorites,\r\n    notifications,\r\n  } = useFriends();\r\n\r\n  return (\r\n    <div data-name=\"friend-list\" className={styles.container}>\r\n      {!!notifications.length && (\r\n        <div data-name=\"notifications\" className={styles.notifications}>\r\n          {notifications.map(({ key, message }) => (\r\n            <p key={key} className={styles.error}>\r\n              {message}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      )}\r\n      {friends.map((friend) => {\r\n        const { id, firstName, lastName, image } = friend;\r\n        const fullName = [firstName, lastName].join(' ');\r\n        return (\r\n          <div key={id} data-name=\"friend\" className={styles.friend}>\r\n            <img src={image} alt={fullName} />\r\n            <span data-name=\"full-name\">{fullName}</span>\r\n            <div className={styles.actions}>\r\n              {!friend.isFavorite && (\r\n                <Button\r\n                  primary\r\n                  onClick={() => addToFavorites(friend)}\r\n                  data-name=\"add-to-favorite\"\r\n                  disabled={friend.isProcessing}\r\n                >\r\n                  Add to favorite\r\n                </Button>\r\n              )}\r\n              {friend.isFavorite && (\r\n                <Button\r\n                  secondary\r\n                  onClick={() => removeFromFavorites(friend)}\r\n                  data-name=\"remove-from-favorite\"\r\n                  disabled={friend.isProcessing}\r\n                >\r\n                  Remove from favorite\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n      {(() => {\r\n        if (isLoading) {\r\n          return <Spinner />;\r\n        }\r\n\r\n        if (loadingErrorMessage) {\r\n          return (\r\n            <span data-name=\"message\" className={styles.error}>\r\n              {loadingErrorMessage}\r\n            </span>\r\n          );\r\n        }\r\n\r\n        if (isEmpty) {\r\n          return (\r\n            <span data-name=\"message\" className={styles.info}>\r\n              {'No friends found :('}\r\n            </span>\r\n          );\r\n        }\r\n\r\n        if (loadMore) {\r\n          return (\r\n            <div className={styles.loadMore}>\r\n              <Button secondary onClick={loadMore} data-name=\"load-more\">\r\n                Load more...\r\n              </Button>\r\n            </div>\r\n          );\r\n        }\r\n      })()}\r\n    </div>\r\n  );\r\n};\r\n","import { useApi } from 'core';\r\nimport { getFriends, processFriend, FriendActions, hasMore } from 'friends-api';\r\nimport { useEffect, useReducer } from 'react';\r\nimport { friendsReducer } from './friendsReducer';\r\nimport { Notification, Friend } from './types';\r\n\r\nexport function useFriends(): {\r\n  friends?: Friend[];\r\n  isLoading: boolean;\r\n  isEmpty: boolean;\r\n  loadingErrorMessage?: string;\r\n  loadMore?: () => void;\r\n  addToFavorites: (friend: Friend) => void;\r\n  removeFromFavorites: (friend: Friend) => void;\r\n  notifications: Notification[];\r\n} {\r\n  const friends = useApi(getFriends);\r\n  const processFriends = useApi(processFriend);\r\n  const [state, dispatch] = useReducer(friendsReducer, {\r\n    friends: [],\r\n    notifications: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    friends.fetch();\r\n  }, [friends]);\r\n\r\n  useEffect(() => {\r\n    if (friends.data) {\r\n      dispatch({ type: 'LOAD_FRIENDS', payload: friends.data });\r\n    }\r\n  }, [friends.data]);\r\n\r\n  useEffect(() => {\r\n    if (!processFriends.fetchArgs) {\r\n      return;\r\n    }\r\n\r\n    const [friend, action] = processFriends.fetchArgs;\r\n    const notificationKey = Date.now().toString();\r\n    dispatch({\r\n      type: processFriends.error ? 'PROCESSING_FAILED' : 'PROCESSING_SUCCEED',\r\n      friend,\r\n      action,\r\n      notificationKey,\r\n    });\r\n    setTimeout(\r\n      () => dispatch({ type: 'CLEAR_NOTIFICATION', key: notificationKey }),\r\n      3000\r\n    );\r\n  }, [processFriends.data, processFriends.error, processFriends.fetchArgs]);\r\n\r\n  return {\r\n    friends: state.friends,\r\n    isLoading: friends.isLoading,\r\n    isEmpty: !state.friends.length,\r\n    loadingErrorMessage:\r\n      friends.error &&\r\n      `${friends.error.response?.error?.message ?? ''} Status: ${\r\n        friends.error.status ?? ''\r\n      }`,\r\n    loadMore:\r\n      friends.data && hasMore(friends.data)\r\n        ? () => friends.fetch(friends.data)\r\n        : undefined,\r\n    addToFavorites: (friend: Friend) => {\r\n      dispatch({ type: 'ADD_TO_FAVORITES', id: friend.id });\r\n      processFriends.fetch(friend, FriendActions.ADD_TO_FAVORITE);\r\n    },\r\n    removeFromFavorites: (friend: Friend) => {\r\n      dispatch({ type: 'REMOVE_FROM_FAVORITES', id: friend.id });\r\n      processFriends.fetch(friend, FriendActions.REMOVE_FROM_FAVORITE);\r\n    },\r\n    notifications: state.notifications,\r\n  };\r\n}\r\n","import React, { FC } from 'react';\r\nimport { FriendsList } from 'friends';\r\nimport './App.css';\r\n\r\nconst App: FC = () => <FriendsList />;\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { setupApiMocks } from 'friends';\r\nimport { WaitForMockApi, setMockApiDelay } from 'mock-api';\r\n\r\nlet app = <App />;\r\n\r\nif (process.env.REACT_APP_USE_MOCK_API === 'true') {\r\n  setupApiMocks();\r\n  setMockApiDelay(750);\r\n\r\n  app = <WaitForMockApi>{app}</WaitForMockApi>;\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>{app}</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}