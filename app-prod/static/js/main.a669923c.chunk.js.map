{"version":3,"sources":["../../../../src/components/Button/Button.tsx","../../../../src/components/Spinner/Spinner.tsx","../../src/types.ts","../../../src/api/useApi.ts","../../src/friends.ts","../../../src/FriendsList/friendsReducer.ts","../../../src/FriendsList/FriendsList.tsx","../../../src/FriendsList/useFriends.ts","../../../src/api/fetchJSON.ts","App.tsx","index.tsx"],"names":["Button","children","disabled","primary","secondary","props","type","className","container","Spinner","FriendActions","useApi","callApi","fetcher","cache","noAbortOnSubsequentCall","apiState","setApiState","isLoading","abortController","current","abort","fetchData","async","fetchArgs","AbortController","payload","options","signal","data","err","error","name","result","Object","assign","fetch","getFriends","reference","href","_links","next","processFriend","friend","action","method","updateFriend","state","id","update","friends","map","friendsReducer","_embedded","isFavorite","isProcessing","ADD_TO_FAVORITE","notifications","key","notificationKey","message","firstName","REMOVE_FROM_FAVORITE","filter","FriendsList","isEmpty","loadingErrorMessage","loadMore","addToFavorites","removeFromFavorites","processFriends","dispatch","Date","now","toString","setTimeout","length","response","status","undefined","useFriends","lastName","image","fullName","join","src","alt","actions","onClick","info","fetchJSON","headers","body","window","JSON","stringify","textResult","text","parse","ok","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a669923c.chunk.js","sourcesContent":["import classNames from 'classnames';\r\nimport React, { FC } from 'react';\r\nimport styles from './Button.module.scss';\r\n\r\nexport type ButtonProps = {\r\n  disabled?: boolean;\r\n  /**\r\n   * Simple click handler\r\n   */\r\n  onClick?: () => void;\r\n\r\n  /**\r\n   * Is primary?\r\n   */\r\n  primary?: boolean;\r\n\r\n  /**\r\n   * default is false\r\n   */\r\n\r\n  secondary?: boolean;\r\n};\r\n\r\nexport const Button: FC<ButtonProps> = ({\r\n  children,\r\n  disabled,\r\n  primary,\r\n  secondary,\r\n  ...props\r\n}) => (\r\n  <button\r\n    {...props}\r\n    type=\"button\"\r\n    className={classNames(styles.container, {\r\n      [styles.primary]: primary,\r\n      [styles.secondary]: secondary,\r\n      [styles.disabled]: disabled,\r\n    })}\r\n    disabled={disabled}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n","import React, { FC } from 'react';\r\nimport styles from './Spinner.module.scss';\r\n\r\nexport const Spinner: FC = (props) => (\r\n  <div {...props} className={styles.container}>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n);\r\n","import { ApiMethod } from 'core';\r\n\r\nexport type Link = {\r\n  href: string;\r\n  method?: ApiMethod;\r\n};\r\n\r\nexport type Friend = {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  image: string;\r\n  isFavorite: boolean;\r\n  _links: Record<FriendActions, Link>;\r\n};\r\n\r\nexport type FriendsResponse = {\r\n  _embedded: Friend[];\r\n  _links: {\r\n    next?: Link;\r\n  };\r\n};\r\n\r\nexport enum FriendActions {\r\n  ADD_TO_FAVORITE = 'addToFavorite',\r\n  REMOVE_FROM_FAVORITE = 'removeFromFavorite',\r\n}\r\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { ApiCaller, ApiError, ApiState, CallApiOptions } from './types';\r\n\r\nexport type Fetcher<FetchArgs extends unknown[], ResponseBody> = (\r\n  callApi: ApiCaller,\r\n  ...args: FetchArgs\r\n) => Promise<ResponseBody>;\r\n\r\nexport type UseApiResult<FetchArgs extends unknown[], ResponseBody> = {\r\n  fetch: (...args: FetchArgs) => void;\r\n  data?: ResponseBody;\r\n  error?: ApiError;\r\n  isLoading: boolean;\r\n  fetchArgs?: FetchArgs;\r\n};\r\n\r\nexport type UseApiOptions = {\r\n  cache?: boolean;\r\n  noAbortOnSubsequentCall?: boolean;\r\n};\r\n\r\nexport function useApi<FetchArgs extends unknown[], ResponseBody>(\r\n  callApi: ApiCaller,\r\n  fetcher: Fetcher<FetchArgs, ResponseBody>,\r\n  { cache, noAbortOnSubsequentCall }: UseApiOptions = {}\r\n): UseApiResult<FetchArgs, ResponseBody> {\r\n  const [apiState, setApiState] = useState({\r\n    isLoading: false,\r\n  } as ApiState<FetchArgs, ResponseBody>);\r\n  const abortController = useRef<AbortController>();\r\n\r\n  useEffect(() => {\r\n    return () => abortController.current?.abort();\r\n  }, []);\r\n\r\n  const fetchData = useCallback(\r\n    async (...fetchArgs: FetchArgs) => {\r\n      if (!noAbortOnSubsequentCall) {\r\n        abortController.current?.abort();\r\n      }\r\n\r\n      try {\r\n        abortController.current = new AbortController();\r\n        setApiState({\r\n          isLoading: true,\r\n        });\r\n        const payload = await fetcher(\r\n          (options: CallApiOptions) =>\r\n            callApi({\r\n              ...options,\r\n              cache,\r\n              signal: abortController.current?.signal,\r\n            }),\r\n          ...fetchArgs\r\n        );\r\n        setApiState({\r\n          isLoading: false,\r\n          data: payload,\r\n          fetchArgs: fetchArgs,\r\n        });\r\n      } catch (err) {\r\n        const error = err as ApiError & { name: string };\r\n\r\n        if (error.name !== 'AbortError') {\r\n          setApiState({\r\n            isLoading: false,\r\n            error: error,\r\n            fetchArgs: fetchArgs,\r\n          });\r\n        } else {\r\n          setApiState({\r\n            isLoading: false,\r\n            fetchArgs: fetchArgs,\r\n          });\r\n        }\r\n      }\r\n    },\r\n    [fetcher, abortController, callApi, cache, noAbortOnSubsequentCall]\r\n  );\r\n\r\n  const result = useMemo(() => ({}), []);\r\n\r\n  return Object.assign(result, apiState, { fetch: fetchData });\r\n}\r\n","import { ApiCaller } from 'core';\r\nimport { Friend, FriendsResponse, FriendActions } from './types';\r\n\r\nexport async function getFriends(\r\n  callApi: ApiCaller,\r\n  reference?: FriendsResponse\r\n): Promise<FriendsResponse> {\r\n  const friends = (await callApi({\r\n    href: reference?._links.next?.href ?? '/api/friends',\r\n  })) as FriendsResponse;\r\n  return friends;\r\n}\r\n\r\nexport function hasMore(reference: FriendsResponse): boolean {\r\n  return !!reference._links.next;\r\n}\r\n\r\nexport async function processFriend(\r\n  callApi: ApiCaller,\r\n  friend: Friend,\r\n  action: FriendActions\r\n): Promise<void> {\r\n  const { href, method } = friend._links[action];\r\n  await callApi({ href, method });\r\n}\r\n","import { FriendActions } from 'friends-api';\r\nimport { FriendsAction, FriendsState, Friend } from './types';\r\n\r\nfunction updateFriend(\r\n  state: FriendsState,\r\n  id: string,\r\n  update: Partial<Friend>\r\n) {\r\n  return {\r\n    ...state,\r\n    friends: state.friends.map((friend) => {\r\n      if (friend.id !== id) {\r\n        return friend;\r\n      }\r\n\r\n      return {\r\n        ...friend,\r\n        ...update,\r\n      };\r\n    }),\r\n  };\r\n}\r\n\r\nexport function friendsReducer(\r\n  state: FriendsState,\r\n  action: FriendsAction\r\n): FriendsState {\r\n  switch (action.type) {\r\n    case 'LOAD_FRIENDS':\r\n      return {\r\n        ...state,\r\n        friends: [...state.friends, ...action.payload._embedded],\r\n      };\r\n    case 'ADD_TO_FAVORITES':\r\n      return updateFriend(state, action.id, {\r\n        isFavorite: true,\r\n        isProcessing: true,\r\n      });\r\n    case 'REMOVE_FROM_FAVORITES':\r\n      return updateFriend(state, action.id, {\r\n        isFavorite: false,\r\n        isProcessing: true,\r\n      });\r\n    case 'PROCESSING_SUCCEED':\r\n      return updateFriend(state, action.friend.id, {\r\n        isProcessing: false,\r\n      });\r\n    case 'PROCESSING_FAILED':\r\n      switch (action.action) {\r\n        case FriendActions.ADD_TO_FAVORITE:\r\n          return {\r\n            ...updateFriend(state, action.friend.id, {\r\n              isProcessing: false,\r\n              isFavorite: false,\r\n            }),\r\n            notifications: [\r\n              {\r\n                key: action.notificationKey,\r\n                message: `Adding ${action.friend.firstName} to favorite was not successful`,\r\n              },\r\n              ...state.notifications,\r\n            ],\r\n          };\r\n        case FriendActions.REMOVE_FROM_FAVORITE:\r\n          return {\r\n            ...updateFriend(state, action.friend.id, {\r\n              isProcessing: false,\r\n              isFavorite: true,\r\n            }),\r\n            notifications: [\r\n              {\r\n                key: action.notificationKey,\r\n                message: `Removing ${action.friend.firstName} from favorite was not successful`,\r\n              },\r\n              ...state.notifications,\r\n            ],\r\n          };\r\n        default:\r\n          return state;\r\n      }\r\n    case 'CLEAR_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(\r\n          ({ key }) => key !== action.key\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { ApiCaller, Button, Spinner } from 'core';\r\nimport React, { FC } from 'react';\r\nimport styles from './FriendsList.module.scss';\r\nimport { useFriends } from './useFriends';\r\n\r\nexport const FriendsList: FC<{ callApi: ApiCaller }> = ({ callApi }) => {\r\n  const {\r\n    friends = [],\r\n    isLoading,\r\n    isEmpty,\r\n    loadingErrorMessage,\r\n    loadMore,\r\n    addToFavorites,\r\n    removeFromFavorites,\r\n    notifications,\r\n  } = useFriends(callApi);\r\n\r\n  return (\r\n    <div data-name=\"friend-list\" className={styles.container}>\r\n      {!!notifications.length && (\r\n        <div data-name=\"notifications\" className={styles.notifications}>\r\n          {notifications.map(({ key, message }) => (\r\n            <p key={key} className={styles.error}>\r\n              {message}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      )}\r\n      {friends.map((friend) => {\r\n        const { id, firstName, lastName, image } = friend;\r\n        const fullName = [firstName, lastName].join(' ');\r\n        return (\r\n          <div key={id} data-name=\"friend\" className={styles.friend}>\r\n            <img src={image} alt={fullName} />\r\n            <span data-name=\"full-name\">{fullName}</span>\r\n            <div className={styles.actions}>\r\n              {!friend.isFavorite && (\r\n                <Button\r\n                  primary\r\n                  onClick={() => addToFavorites(friend)}\r\n                  data-name=\"add-to-favorite\"\r\n                  disabled={friend.isProcessing}\r\n                >\r\n                  Add to favorite\r\n                </Button>\r\n              )}\r\n              {friend.isFavorite && (\r\n                <Button\r\n                  secondary\r\n                  onClick={() => removeFromFavorites(friend)}\r\n                  data-name=\"remove-from-favorite\"\r\n                  disabled={friend.isProcessing}\r\n                >\r\n                  Remove from favorite\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n      {(() => {\r\n        if (isLoading) {\r\n          return <Spinner />;\r\n        }\r\n\r\n        if (loadingErrorMessage) {\r\n          return (\r\n            <span data-name=\"message\" className={styles.error}>\r\n              {loadingErrorMessage}\r\n            </span>\r\n          );\r\n        }\r\n\r\n        if (isEmpty) {\r\n          return (\r\n            <span data-name=\"message\" className={styles.info}>\r\n              {'No friends found :('}\r\n            </span>\r\n          );\r\n        }\r\n\r\n        if (loadMore) {\r\n          return (\r\n            <div className={styles.loadMore}>\r\n              <Button secondary onClick={loadMore} data-name=\"load-more\">\r\n                Load more...\r\n              </Button>\r\n            </div>\r\n          );\r\n        }\r\n      })()}\r\n    </div>\r\n  );\r\n};\r\n","import { useApi, ApiCaller } from 'core';\r\nimport { getFriends, processFriend, FriendActions, hasMore } from 'friends-api';\r\nimport { useEffect, useReducer } from 'react';\r\nimport { friendsReducer } from './friendsReducer';\r\nimport { Notification, Friend } from './types';\r\n\r\nexport function useFriends(\r\n  callApi: ApiCaller\r\n): {\r\n  friends?: Friend[];\r\n  isLoading: boolean;\r\n  isEmpty: boolean;\r\n  loadingErrorMessage?: string;\r\n  loadMore?: () => void;\r\n  addToFavorites: (friend: Friend) => void;\r\n  removeFromFavorites: (friend: Friend) => void;\r\n  notifications: Notification[];\r\n} {\r\n  const friends = useApi(callApi, getFriends);\r\n  const processFriends = useApi(callApi, processFriend, { noAbortOnSubsequentCall: true });\r\n  const [state, dispatch] = useReducer(friendsReducer, {\r\n    friends: [],\r\n    notifications: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    friends.fetch();\r\n  }, [friends]);\r\n\r\n  useEffect(() => {\r\n    if (friends.data) {\r\n      dispatch({ type: 'LOAD_FRIENDS', payload: friends.data });\r\n    }\r\n  }, [friends.data]);\r\n\r\n  useEffect(() => {\r\n    if (!processFriends.fetchArgs) {\r\n      return;\r\n    }\r\n\r\n    const [friend, action] = processFriends.fetchArgs;\r\n    const notificationKey = Date.now().toString();\r\n    dispatch({\r\n      type: processFriends.error ? 'PROCESSING_FAILED' : 'PROCESSING_SUCCEED',\r\n      friend,\r\n      action,\r\n      notificationKey,\r\n    });\r\n    setTimeout(\r\n      () => dispatch({ type: 'CLEAR_NOTIFICATION', key: notificationKey }),\r\n      3000\r\n    );\r\n  }, [processFriends.data, processFriends.error, processFriends.fetchArgs]);\r\n\r\n  return {\r\n    friends: state.friends,\r\n    isLoading: friends.isLoading,\r\n    isEmpty: friends.data ? !state.friends.length : false,\r\n    loadingErrorMessage:\r\n      friends.error &&\r\n      `${friends.error.response?.error?.message ?? ''} Status: ${\r\n        friends.error.status ?? ''\r\n      }`,\r\n    loadMore:\r\n      friends.data && hasMore(friends.data)\r\n        ? () => friends.fetch(friends.data)\r\n        : undefined,\r\n    addToFavorites: (friend: Friend) => {\r\n      dispatch({ type: 'ADD_TO_FAVORITES', id: friend.id });\r\n      processFriends.fetch(friend, FriendActions.ADD_TO_FAVORITE);\r\n    },\r\n    removeFromFavorites: (friend: Friend) => {\r\n      dispatch({ type: 'REMOVE_FROM_FAVORITES', id: friend.id });\r\n      processFriends.fetch(friend, FriendActions.REMOVE_FROM_FAVORITE);\r\n    },\r\n    notifications: state.notifications,\r\n  };\r\n}\r\n","import { ApiError, ApiErrorResponse, CallApiOptions } from './types';\r\n\r\nexport async function fetchJSON<ResponseBody>({\r\n  href,\r\n  method,\r\n  headers,\r\n  body,\r\n  signal,\r\n}: CallApiOptions): Promise<ResponseBody> {\r\n  const response = await window.fetch(href, {\r\n    ...(method && { method }),\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json',\r\n    },\r\n    ...(body ? { body: JSON.stringify(body) } : {}),\r\n    ...(signal && { signal }),\r\n  });\r\n\r\n  const textResult = await response.text();\r\n  const result = (textResult ? JSON.parse(textResult) : null) as ResponseBody;\r\n\r\n  if (!response.ok) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw {\r\n      message: 'Failed to fetch data',\r\n      response: result as ApiErrorResponse,\r\n      status: response.status,\r\n    } as ApiError;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import React, { FC } from 'react';\r\nimport { FriendsList } from 'friends';\r\nimport { fetchJSON } from 'core';\r\n\r\nimport './App.css';\r\n\r\nconst App: FC = () => <FriendsList callApi={fetchJSON} />;\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { setMockApiDelay } from 'mock-api';\r\nimport { setupWorker } from 'msw';\r\nimport { mockFriendHandlers } from 'friends-api';\r\n\r\nimport './index.css';\r\n\r\nif (process.env.REACT_APP_USE_MOCK_API === 'true') {\r\n  const worker = setupWorker(...mockFriendHandlers);\r\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n  worker.start();\r\n  setMockApiDelay(750);\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}