{"version":3,"sources":["../../../../src/components/Button/Button.tsx","../../src/mockFriends.ts","../../src/setupApiMocks.ts","../../../../src/components/FriendsList/FriendsList.tsx","../../src/friends.ts","logo.svg","App.tsx","index.tsx"],"names":["Button","children","onClick","primary","secondary","type","className","FriendsList","error","setError","friends","setFriends","console","log","response","window","fetch","ok","Error","json","getFriends","then","catch","length","map","firstName","lastName","friend","join","key","App","src","logo","alt","href","target","rel","app","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wiBAsBaA,EAA0B,EACrCC,WACAC,UACAC,UACAC,eAEA,4BACEC,KAAK,SACLH,QAASA,EACTI,UAAW,IAAW,CACpB,CAAC,EAAOH,SAAUA,EAClB,CAAC,EAAOC,WAAYA,KAGrBH,G,qBClCL,ICCY,GAAZ,SAAY,GACV,kBACA,gBACA,oBACA,cAJF,CAAY,MAAiB,KAOO,EAAkB,O,MCLzCM,EAAkB,KAC7B,MAAOC,EAAOC,GAAY,oBAAS,IAC5BC,EAASC,GAAc,qBAM9B,OAJA,qBAAU,M,8DCHVC,QAAQC,IAAI,wBACZ,MAAMC,QAAiBC,OAAOC,MAAM,gBAEpC,IAAKF,EAASG,GACZ,MAAM,IAAIC,MAAM,0BAGlB,aAAcJ,EAASK,WDHrBC,GAAaC,KAAKV,GAAYW,MAAMb,KACnC,IAECD,EACK,8BAAO,0BAGXE,EAIAA,EAAQa,OAKX,4BACGb,EAAQc,KAAI,EAAGC,YAAWC,eACzB,MAAMC,EAAS,CAACF,EAAWC,GAAUE,KAAK,KAC1C,OACE,wBAAIC,IAAKF,EAAM,YAAY,QACxBA,OATF,8BAAO,uBAJP,8BAAO,e,UElBH,MAA0B,iCCyB1BG,MApBC,IACd,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKyB,IAAKC,EAAM1B,UAAU,WAAW2B,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACE3B,UAAU,WACV4B,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAEJ,kBAACpC,EAAD,CAAQG,SAAO,GAAf,eACA,kBAACI,EAAD,SCZR,IAAI8B,EAAM,kBAAC,EAAD,MAQVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAAmBH,GACnBI,SAASC,eAAe,W","file":"static/js/main.c5b33bc1.chunk.js","sourcesContent":["import classNames from \"classnames\";\r\nimport React, { FC } from \"react\";\r\nimport styles from \"./Button.module.scss\";\r\n\r\nexport type ButtonProps = {\r\n  /**\r\n   * Simple click handler\r\n   */\r\n  onClick?: () => void;\r\n\r\n  /**\r\n   * Is primary?\r\n   */\r\n  primary?: boolean;\r\n\r\n  /**\r\n   * default is false\r\n   */\r\n  \r\n  secondary?: boolean;\r\n};\r\n\r\nexport const Button: FC<ButtonProps> = ({\r\n  children,\r\n  onClick,\r\n  primary,\r\n  secondary,\r\n}) => (\r\n  <button\r\n    type=\"button\"\r\n    onClick={onClick}\r\n    className={classNames({\r\n      [styles.primary]: primary,\r\n      [styles.secondary]: secondary,\r\n    })}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n","import { Friend } from './friends';\r\n\r\nexport default [\r\n  { firstName: 'Alyson', lastName: 'Donnelly' },\r\n  { firstName: 'Carlee', lastName: 'Kreiger' },\r\n  { firstName: 'Enrico', lastName: 'Pouros' },\r\n] as Friend[];\r\n","import { setupApiMocks as setupFriendsApiMocks } from 'friends-api';\r\n\r\nexport function setupApiMocks(): void {\r\n  setupFriendsApiMocks();\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport React, { FC } from 'react';\r\nimport { Friend, getFriends } from 'friends-api';\r\n\r\nexport const FriendsList: FC = () => {\r\n  const [error, setError] = useState(false);\r\n  const [friends, setFriends] = useState<Friend[]>();\r\n\r\n  useEffect(() => {\r\n    getFriends().then(setFriends).catch(setError);\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <span>{'Failed to load friends'}</span>;\r\n  }\r\n\r\n  if (!friends) {\r\n    return <span>{'Loading...'}</span>;\r\n  }\r\n\r\n  if (!friends.length) {\r\n    return <span>{'No friends found :('}</span>;\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {friends.map(({ firstName, lastName }) => {\r\n        const friend = [firstName, lastName].join(' ');\r\n        return (\r\n          <li key={friend} data-name=\"name\">\r\n            {friend}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","export type Friend = {\r\n  firstName: string;\r\n  lastName: string;\r\n};\r\n\r\nexport async function getFriends(): Promise<Friend[]> {\r\n  console.log('fetching friends....');\r\n  const response = await window.fetch('/api/friends');\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to load friends');\r\n  }\r\n\r\n  return (await response.json()) as Friend[];\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React, { FC } from 'react';\r\nimport { Button, FriendsList } from 'ui-lib';\r\nimport './App.css';\r\nimport logo from './logo.svg';\r\n\r\nconst App: FC = () => (\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <p>\r\n        Edit <code>src/App.tsx</code> and save to reload.\r\n      </p>\r\n      <a\r\n        className=\"App-link\"\r\n        href=\"https://reactjs.org\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <Button primary>Learn React</Button>\r\n        <FriendsList />\r\n      </a>\r\n    </header>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { setupApiMocks } from 'ui-lib';\r\nimport { WaitForMockApi } from 'dev-tools';\r\n\r\nlet app = <App />;\r\n\r\nif (process.env.REACT_APP_USE_MOCK_API === 'true') {\r\n  setupApiMocks();\r\n\r\n  app = <WaitForMockApi>{app}</WaitForMockApi>;\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>{app}</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}