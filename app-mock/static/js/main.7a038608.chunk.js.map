{"version":3,"sources":["../../../../src/components/Button/Button.tsx","../../../src/mockApi/utils.ts","../../../src/mockApi/mockApi.ts","../../../src/mockApi/WaitForMockApi.tsx","../../src/mockFriends.ts","../../src/setupApiMocks.ts","../../../../src/components/FriendsList/FriendsList.tsx","../../src/friends.ts","logo.svg","App.tsx","index.tsx"],"names":["Button","children","onClick","primary","secondary","type","className","getParams","match","mock","reduce","acc","val","i","prop","keys","undefined","getQuery","searchParams","query","forEach","value","name","Array","isArray","enableMockApi","navigator","serviceWorker","register","scope","catch","err","console","error","Promise","resolve","onmessage","data","log","ports","url","fullUrl","method","body","headers","port","mocks","URL","map","regexp","path","key","find","test","pathname","exec","findMatchingMock","postMessage","response","delay","status","mockError","mockHTML","responseBody","callback","JSON","parse","params","statusCode","delayMs","enable","message","window","setTimeout","stringify","createMockResponse","handleRequest","request","WaitForMockApi","ready","setReady","then","firstName","lastName","newMocks","FriendsList","setError","friends","setFriends","fetch","ok","Error","json","getFriends","length","friend","join","App","src","logo","alt","href","target","rel","app","setupFriendsApiMocks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a038608.chunk.js","sourcesContent":["import classNames from \"classnames\";\r\nimport React, { FC } from \"react\";\r\nimport styles from \"./Button.module.scss\";\r\n\r\nexport type ButtonProps = {\r\n  /**\r\n   * Simple click handler\r\n   */\r\n  onClick?: () => void;\r\n\r\n  /**\r\n   * Is primary?\r\n   */\r\n  primary?: boolean;\r\n\r\n  /**\r\n   * default is false\r\n   */\r\n  \r\n  secondary?: boolean;\r\n};\r\n\r\nexport const Button: FC<ButtonProps> = ({\r\n  children,\r\n  onClick,\r\n  primary,\r\n  secondary,\r\n}) => (\r\n  <button\r\n    type=\"button\"\r\n    onClick={onClick}\r\n    className={classNames({\r\n      [styles.primary]: primary,\r\n      [styles.secondary]: secondary,\r\n    })}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n","import { Key, pathToRegexp } from \"path-to-regexp\";\r\nimport { Mock, MockWithRegexp } from \"./types\";\r\n\r\nexport function findMatchingMock(\r\n  mocks: Mock[],\r\n  url: URL,\r\n  method: string\r\n): { match: RegExpExecArray | null; mock: MockWithRegexp | null } {\r\n  const mock = mocks\r\n    .map((mock) => {\r\n      const keys: Key[] = [];\r\n      const regexp = pathToRegexp(mock.path, keys);\r\n\r\n      return {\r\n        regexp,\r\n        keys: keys.map((key) => key.name),\r\n        ...mock,\r\n      };\r\n    })\r\n    .find(\r\n      (mock) =>\r\n        mock.regexp.test(url.pathname) && (mock.method || \"GET\") === method\r\n    ) as MockWithRegexp;\r\n  const match = mock && mock.regexp.exec(url.pathname);\r\n  return { match, mock };\r\n}\r\n\r\nexport function getParams(\r\n  match: RegExpExecArray,\r\n  mock: MockWithRegexp\r\n): Record<string, string> {\r\n  return match.reduce((acc, val, i) => {\r\n    const prop = mock.keys[i - 1];\r\n\r\n    if (!prop) {\r\n      return acc;\r\n    }\r\n\r\n    if (val !== undefined || !(prop in acc)) {\r\n      acc[prop] = val;\r\n    }\r\n\r\n    return acc;\r\n  }, {} as Record<string, string>);\r\n}\r\n\r\nexport function getQuery(\r\n  searchParams: URLSearchParams\r\n): Record<string, string | string[]> {\r\n  const query = {} as Record<string, string | string[]>;\r\n\r\n  searchParams.forEach((value, name) => {\r\n    if (Array.isArray(query[name])) {\r\n      query[name] = [...query[name], value];\r\n      return;\r\n    }\r\n\r\n    if (query[name]) {\r\n      query[name] = [query[name] as string, value];\r\n      return;\r\n    }\r\n\r\n    query[name] = value;\r\n  });\r\n  return query;\r\n}\r\n","import { Mock, MockMethod, MockWithRegexp } from './types';\r\nimport { findMatchingMock, getParams, getQuery } from './utils';\r\n\r\nlet mocks: Mock[] = [];\r\n\r\ntype RawRequest = {\r\n  url: string;\r\n  method: MockMethod;\r\n  body: string;\r\n  headers: Record<string, string | string[]>;\r\n};\r\n\r\nexport async function enableMockApi(): Promise<void> {\r\n  navigator.serviceWorker\r\n    .register('mockApiServiceWorker.js', { scope: './' })\r\n    .catch((err) => console.error('error registering sw', err));\r\n\r\n  await new Promise<void>((resolve) => {\r\n    navigator.serviceWorker.onmessage = ({\r\n      data,\r\n    }: {\r\n      data?: { type?: string };\r\n    }) => {\r\n      if (data && data.type === 'READY') {\r\n        console.log('SW is ready. Registered mocks', mocks);\r\n        resolve();\r\n      }\r\n    };\r\n  });\r\n\r\n  navigator.serviceWorker.onmessage = ({\r\n    data,\r\n    ports,\r\n  }: {\r\n    data?: { type?: string; request: RawRequest };\r\n    ports: ReadonlyArray<MessagePort>;\r\n  }) => {\r\n    if (data && data.type === 'REQUEST') {\r\n      return handleRequest({ ...data.request, port: ports[0], mocks });\r\n    }\r\n  };\r\n}\r\n\r\nexport function registerApiMocks(newMocks: Mock[]): void {\r\n  mocks = [...mocks, ...newMocks];\r\n}\r\n\r\nasync function handleRequest({\r\n  url: fullUrl,\r\n  method,\r\n  body,\r\n  headers,\r\n  port,\r\n  mocks,\r\n}: {\r\n  url: string;\r\n  method: MockMethod;\r\n  body: string;\r\n  headers: Record<string, string | string[]>;\r\n  port: MessagePort;\r\n  mocks: Mock[];\r\n}) {\r\n  const url = new URL(fullUrl);\r\n  const { match, mock } = findMatchingMock(mocks, url, method);\r\n\r\n  if (!match || !mock) {\r\n    return port.postMessage({\r\n      type: 'MOCK_NOT_FOUND',\r\n    });\r\n  }\r\n\r\n  const response = await createMockResponse({\r\n    mock,\r\n    match,\r\n    method,\r\n    headers,\r\n    url,\r\n    body,\r\n  });\r\n\r\n  port.postMessage({\r\n    response,\r\n    type: 'MOCK_SUCCESS',\r\n  });\r\n}\r\n\r\nexport async function createMockResponse({\r\n  mock,\r\n  match,\r\n  url,\r\n  method,\r\n  body,\r\n  headers,\r\n}: {\r\n  mock: MockWithRegexp;\r\n  match: RegExpExecArray;\r\n  url: URL;\r\n  method: MockMethod;\r\n  body: string;\r\n  headers: Record<string, string | string[]>;\r\n}): Promise<{ body: unknown; status: number }> {\r\n  let status = 200;\r\n  let delay: number | undefined;\r\n  let mockError = false;\r\n  let mockHTML = false;\r\n  let responseBody = await mock.callback(\r\n    {\r\n      url: url.pathname,\r\n      method,\r\n      headers,\r\n      body: body && (JSON.parse(body) as unknown),\r\n      params: getParams(match, mock),\r\n      query: getQuery(url.searchParams),\r\n    },\r\n    {\r\n      status(statusCode: number) {\r\n        status = statusCode;\r\n      },\r\n      delay(delayMs: number) {\r\n        delay = delayMs;\r\n      },\r\n      mockError(enable: boolean) {\r\n        mockError = enable;\r\n      },\r\n      mockHTML(enable: boolean) {\r\n        mockHTML = enable;\r\n      },\r\n    }\r\n  );\r\n\r\n  if (mockError) {\r\n    responseBody = {\r\n      error: { message: \"We couldn't process your request at this time\" },\r\n    };\r\n  }\r\n\r\n  if (delay) {\r\n    await new Promise((resolve) => window.setTimeout(resolve, delay));\r\n  }\r\n\r\n  return {\r\n    body: mockHTML\r\n      ? '<html></html>'\r\n      : responseBody && JSON.stringify(responseBody),\r\n    status: mockError ? 500 : status,\r\n  };\r\n}\r\n","import React, { FC, useState, useEffect } from 'react';\r\nimport { enableMockApi } from './mockApi';\r\n\r\nexport const WaitForMockApi: FC = ({ children }) => {\r\n  const [ready, setReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    enableMockApi()\r\n      .then(() => setReady(true))\r\n      .catch((error) =>\r\n        setReady(() => {\r\n          throw error;\r\n        })\r\n      );\r\n  }, []);\r\n\r\n  if (!ready) {\r\n    return null;\r\n  }\r\n\r\n  return <>{children}</>;\r\n};\r\n","import { Friend } from './friends';\r\n\r\nexport default [\r\n  { firstName: 'Alyson', lastName: 'Donnelly' },\r\n  { firstName: 'Carlee', lastName: 'Kreiger' },\r\n  { firstName: 'Enrico', lastName: 'Pouros' },\r\n] as Friend[];\r\n","import { setupApiMocks as setupFriendsApiMocks } from 'friends-api';\r\n\r\nexport function setupApiMocks(): void {\r\n  setupFriendsApiMocks();\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport React, { FC } from 'react';\r\nimport { Friend, getFriends } from 'friends-api';\r\n\r\nexport const FriendsList: FC = () => {\r\n  const [error, setError] = useState(false);\r\n  const [friends, setFriends] = useState<Friend[]>();\r\n\r\n  useEffect(() => {\r\n    getFriends().then(setFriends).catch(setError);\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <span>{'Failed to load friends'}</span>;\r\n  }\r\n\r\n  if (!friends) {\r\n    return <span>{'Loading...'}</span>;\r\n  }\r\n\r\n  if (!friends.length) {\r\n    return <span>{'No friends found :('}</span>;\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {friends.map(({ firstName, lastName }) => {\r\n        const friend = [firstName, lastName].join(' ');\r\n        return (\r\n          <li key={friend} data-name=\"name\">\r\n            {friend}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","export type Friend = {\r\n  firstName: string;\r\n  lastName: string;\r\n};\r\n\r\nexport async function getFriends(): Promise<Friend[]> {\r\n  console.log('fetching friends....');\r\n  const response = await window.fetch('/api/friends');\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to load friends');\r\n  }\r\n\r\n  return (await response.json()) as Friend[];\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React, { FC } from 'react';\r\nimport { Button, FriendsList } from 'ui-lib';\r\nimport './App.css';\r\nimport logo from './logo.svg';\r\n\r\nconst App: FC = () => (\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <p>\r\n        Edit <code>src/App.tsx</code> and save to reload.\r\n      </p>\r\n      <a\r\n        className=\"App-link\"\r\n        href=\"https://reactjs.org\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <Button primary>Learn React</Button>\r\n        <FriendsList />\r\n      </a>\r\n    </header>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { setupApiMocks } from 'ui-lib';\r\nimport { WaitForMockApi } from 'dev-tools';\r\n\r\nlet app = <App />;\r\n\r\nif (process.env.REACT_APP_USE_MOCK_API === 'true') {\r\n  setupApiMocks();\r\n\r\n  app = <WaitForMockApi>{app}</WaitForMockApi>;\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>{app}</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}