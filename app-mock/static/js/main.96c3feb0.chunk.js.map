{"version":3,"sources":["../../../src/mockApi/mocks.ts","../../../../src/components/Button/Button.tsx","../../src/friends.ts","../../../src/api/fetchJSON.ts","../../../src/mockApi/swMockApi.ts","../../../src/mockApi/utils.ts","../../../src/mockApi/WaitForMockApi.tsx","../../src/mockFriends.ts","../../../../src/components/FriendsList/FriendsList.tsx","../../../src/api/useApi.ts","logo.svg","App.tsx","index.tsx","../../src/setupApiMocks.ts","../../../src/mockApi/mockApi.ts"],"names":["mocks","mockSwitches","searchParams","URLSearchParams","window","location","search","Object","fromEntries","entries","filter","name","map","value","split","getInitialMockSwitches","keys","length","registerApiMocks","newMocks","getMocks","getMockSwitch","Button","children","onClick","primary","secondary","type","className","async","getFriends","url","init","method","headers","body","ajax","toPromise","response","error","ajaxError","message","status","fetchJSON","enableSwMockApi","navigator","serviceWorker","register","scope","catch","err","console","Promise","resolve","onmessage","data","log","ports","fullUrl","port","URL","match","mock","regexp","path","key","find","test","pathname","exec","findMatchingMock","postMessage","handleRequest","request","WaitForMockApi","ready","setReady","then","firstName","lastName","FriendsList","friends","fetcher","setData","setError","isLoading","setIsLoading","result","args","finally","assign","useApi","fetch","friend","join","App","src","logo","alt","href","target","rel","app","ReactDOM","render","StrictMode","document","getElementById","createMockResponse","delay","mockError","mockHTML","responseBody","callback","JSON","parse","params","getParams","query","getQuery","statusCode","delayMs","enable","setTimeout","stringify","reduce","acc","val","i","prop","undefined","forEach","Array","isArray"],"mappings":"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","file":"static/js/main.96c3feb0.chunk.js","sourcesContent":["import { Mock } from './types';\r\n\r\nlet mocks: Mock[] = [];\r\nconst mockSwitches = getInitialMockSwitches();\r\nconst hasInitialMockSwitches = !!Object.keys(mockSwitches).length;\r\n\r\nexport function registerApiMocks(newMocks: Mock[]): void {\r\n  mocks = [...mocks, ...newMocks];\r\n}\r\n\r\nexport function getMocks(): Mock[] {\r\n  return mocks;\r\n}\r\n\r\nfunction getInitialMockSwitches(): Record<string, string> {\r\n  const searchParams = new URLSearchParams(window.location.search);\r\n  return Object.fromEntries(\r\n    [...searchParams.entries()]\r\n      .filter(([name]) => name === 'mock')\r\n      .map(([, value]) => value.split('--'))\r\n  ) as Record<string, string>;\r\n}\r\n\r\nexport function setMockSwitch(name: string, value: string): void {\r\n  if (hasInitialMockSwitches) {\r\n    return;\r\n  }\r\n\r\n  mockSwitches[name] = value;\r\n}\r\n\r\nexport function getMockSwitch(name: string): string {\r\n  return mockSwitches[name];\r\n}\r\n","import classNames from \"classnames\";\r\nimport React, { FC } from \"react\";\r\nimport styles from \"./Button.module.scss\";\r\n\r\nexport type ButtonProps = {\r\n  /**\r\n   * Simple click handler\r\n   */\r\n  onClick?: () => void;\r\n\r\n  /**\r\n   * Is primary?\r\n   */\r\n  primary?: boolean;\r\n\r\n  /**\r\n   * default is false\r\n   */\r\n  \r\n  secondary?: boolean;\r\n};\r\n\r\nexport const Button: FC<ButtonProps> = ({\r\n  children,\r\n  onClick,\r\n  primary,\r\n  secondary,\r\n}) => (\r\n  <button\r\n    type=\"button\"\r\n    onClick={onClick}\r\n    className={classNames({\r\n      [styles.primary]: primary,\r\n      [styles.secondary]: secondary,\r\n    })}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n","import { fetchJSON } from 'core';\r\n\r\nexport type Friend = {\r\n  firstName: string;\r\n  lastName: string;\r\n};\r\n\r\nexport async function getFriends(): Promise<Friend[]> {\r\n  return await fetchJSON<Friend[]>('/api/friends');\r\n}\r\n","import { ajax, AjaxError } from 'rxjs/ajax';\r\nimport { ApiError, ApiErrorResponse } from './types';\r\n\r\nexport async function fetchJSON<T>(\r\n  url: string,\r\n  init: {\r\n    method?: string;\r\n    headers?: Record<string, string>;\r\n    body?: Record<string, unknown>;\r\n  } = {}\r\n): Promise<T> {\r\n  const { method, headers, body } = init;\r\n  try {\r\n    const result = await ajax({\r\n      url,\r\n      ...(method && { method }),\r\n      ...(body && { body }),\r\n      headers: {\r\n        ...headers,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }).toPromise();\r\n\r\n    return result.response as T;\r\n  } catch (error) {\r\n    const ajaxError = error as AjaxError;\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw {\r\n      message: ajaxError.message,\r\n      response: ajaxError.response as ApiErrorResponse,\r\n      status: ajaxError.status,\r\n    } as ApiError;\r\n  }\r\n}\r\n","import { createMockResponse } from './mockApi';\r\nimport { getMocks } from './mocks';\r\nimport { MockMethod } from './types';\r\nimport { findMatchingMock } from './utils';\r\n\r\ntype RawRequest = {\r\n  url: string;\r\n  method: MockMethod;\r\n  body: string;\r\n  headers: Record<string, string | string[]>;\r\n};\r\n\r\nexport async function enableSwMockApi(): Promise<void> {\r\n  navigator.serviceWorker\r\n    .register('mockApiServiceWorker.js', { scope: './' })\r\n    .catch((err) => console.error('error registering sw', err));\r\n\r\n  await new Promise<void>((resolve) => {\r\n    navigator.serviceWorker.onmessage = ({\r\n      data,\r\n    }: {\r\n      data?: { type?: string };\r\n    }) => {\r\n      if (data && data.type === 'READY') {\r\n        console.log('SW is ready. Registered mocks', getMocks());\r\n        resolve();\r\n      }\r\n    };\r\n  });\r\n\r\n  navigator.serviceWorker.onmessage = ({\r\n    data,\r\n    ports,\r\n  }: {\r\n    data?: { type?: string; request: RawRequest };\r\n    ports: ReadonlyArray<MessagePort>;\r\n  }) => {\r\n    if (data && data.type === 'REQUEST') {\r\n      return handleRequest({ ...data.request, port: ports[0] });\r\n    }\r\n  };\r\n}\r\n\r\nasync function handleRequest({\r\n  url: fullUrl,\r\n  method,\r\n  body,\r\n  headers,\r\n  port,\r\n}: {\r\n  url: string;\r\n  method: MockMethod;\r\n  body: string;\r\n  headers: Record<string, string | string[]>;\r\n  port: MessagePort;\r\n}): Promise<void> {\r\n  const url = new URL(fullUrl);\r\n  const { match, mock } = findMatchingMock(url, method);\r\n\r\n  if (!match || !mock) {\r\n    return port.postMessage({\r\n      type: 'MOCK_NOT_FOUND',\r\n    });\r\n  }\r\n\r\n  const response = await createMockResponse({\r\n    mock,\r\n    match,\r\n    method,\r\n    headers,\r\n    url,\r\n    body,\r\n  });\r\n\r\n  port.postMessage({\r\n    response,\r\n    type: 'MOCK_SUCCESS',\r\n  });\r\n}\r\n","import { Key, pathToRegexp } from 'path-to-regexp';\r\nimport { getMocks } from './mocks';\r\nimport { MockWithRegexp } from './types';\r\n\r\nexport function findMatchingMock(\r\n  url: URL,\r\n  method: string\r\n): { match: RegExpExecArray | null; mock: MockWithRegexp | null } {\r\n  const mock = getMocks()\r\n    .map((mock) => {\r\n      const keys: Key[] = [];\r\n      const regexp = pathToRegexp(mock.path, keys);\r\n\r\n      return {\r\n        regexp,\r\n        keys: keys.map((key) => key.name),\r\n        ...mock,\r\n      };\r\n    })\r\n    .find(\r\n      (mock) =>\r\n        mock.regexp.test(url.pathname) && (mock.method || 'GET') === method\r\n    ) as MockWithRegexp;\r\n  const match = mock && mock.regexp.exec(url.pathname);\r\n  return { match, mock };\r\n}\r\n\r\nexport function getParams(\r\n  match: RegExpExecArray,\r\n  mock: MockWithRegexp\r\n): Record<string, string> {\r\n  return match.reduce((acc, val, i) => {\r\n    const prop = mock.keys[i - 1];\r\n\r\n    if (!prop) {\r\n      return acc;\r\n    }\r\n\r\n    if (val !== undefined || !(prop in acc)) {\r\n      acc[prop] = val;\r\n    }\r\n\r\n    return acc;\r\n  }, {} as Record<string, string>);\r\n}\r\n\r\nexport function getQuery(\r\n  searchParams: URLSearchParams\r\n): Record<string, string | string[]> {\r\n  const query = {} as Record<string, string | string[]>;\r\n\r\n  searchParams.forEach((value, name) => {\r\n    if (Array.isArray(query[name])) {\r\n      query[name] = [...query[name], value];\r\n      return;\r\n    }\r\n\r\n    if (query[name]) {\r\n      query[name] = [query[name] as string, value];\r\n      return;\r\n    }\r\n\r\n    query[name] = value;\r\n  });\r\n  return query;\r\n}\r\n","import React, { FC, useState, useEffect } from 'react';\r\nimport { enableSwMockApi } from './swMockApi';\r\n\r\nexport const WaitForMockApi: FC = ({ children }) => {\r\n  const [ready, setReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    enableSwMockApi()\r\n      .then(() => setReady(true))\r\n      .catch((error) =>\r\n        setReady(() => {\r\n          throw error;\r\n        })\r\n      );\r\n  }, []);\r\n\r\n  if (!ready) {\r\n    return null;\r\n  }\r\n\r\n  return <>{children}</>;\r\n};\r\n","import { Friend } from './friends';\r\n\r\nexport default [\r\n  { firstName: 'Alyson', lastName: 'Donnelly' },\r\n  { firstName: 'Carlee', lastName: 'Kreiger' },\r\n  { firstName: 'Enrico', lastName: 'Pouros' },\r\n] as Friend[];\r\n","import { useEffect } from 'react';\r\nimport React, { FC } from 'react';\r\nimport { getFriends } from 'friends-api';\r\nimport { useApi } from 'core';\r\n\r\nexport const FriendsList: FC = () => {\r\n  const friends = useApi(getFriends);\r\n\r\n  useEffect(() => {\r\n    friends.fetch();\r\n  }, [friends]);\r\n\r\n  if (friends.error) {\r\n    const message = `${friends.error.response?.error?.message || ''}. Status: ${\r\n      friends.error.status || ''\r\n    }`;\r\n    return <span>{message}</span>;\r\n  }\r\n\r\n  if (friends.isLoading) {\r\n    return <span>{'Loading...'}</span>;\r\n  }\r\n\r\n  if (!friends.data?.length) {\r\n    return <span>{'No friends found :('}</span>;\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {friends.data.map(({ firstName, lastName }) => {\r\n        const friend = [firstName, lastName].join(' ');\r\n        return (\r\n          <li key={friend} data-name=\"name\">\r\n            {friend}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n","import { useState, useMemo } from 'react';\r\nimport { ApiError } from './types';\r\n\r\ntype Fetcher<A extends unknown[], T> = (...args: A) => Promise<T>;\r\n\r\ntype UseApiResult<A extends unknown[], T> = {\r\n  fetch: (...args: A) => void;\r\n  data?: T;\r\n  error?: ApiError;\r\n  isLoading: boolean;\r\n};\r\n\r\nexport function useApi<A extends unknown[], T>(\r\n  fetcher: Fetcher<A, T>\r\n): UseApiResult<A, T> {\r\n  const [data, setData] = useState<T>();\r\n  const [error, setError] = useState<ApiError>();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const result = useMemo(\r\n    () => ({\r\n      fetch(...args: A) {\r\n        setIsLoading(true);\r\n        fetcher(...args)\r\n          .then(setData)\r\n          .catch(setError)\r\n          .finally(() => setIsLoading(false));\r\n      },\r\n    }),\r\n    [fetcher]\r\n  );\r\n\r\n  return Object.assign(result, { data, error, isLoading });\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React, { FC } from 'react';\r\nimport { Button, FriendsList } from 'ui-lib';\r\nimport './App.css';\r\nimport logo from './logo.svg';\r\n\r\nconst App: FC = () => (\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <p>\r\n        Edit <code>src/App.tsx</code> and save to reload.\r\n      </p>\r\n      <a\r\n        className=\"App-link\"\r\n        href=\"https://reactjs.org\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <Button primary>Learn React</Button>\r\n        <FriendsList />\r\n      </a>\r\n    </header>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { setupApiMocks } from 'ui-lib';\r\nimport { WaitForMockApi } from 'dev-tools';\r\n\r\nlet app = <App />;\r\n\r\nif (process.env.REACT_APP_USE_MOCK_API === 'true') {\r\n  setupApiMocks();\r\n\r\n  app = <WaitForMockApi>{app}</WaitForMockApi>;\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>{app}</React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","import { setupApiMocks as setupFriendsApiMocks } from 'friends-api';\r\n\r\nexport function setupApiMocks(): void {\r\n  setupFriendsApiMocks();\r\n}\r\n","import { MockMethod, MockWithRegexp } from './types';\r\nimport { Key, pathToRegexp } from 'path-to-regexp';\r\nimport { getMocks } from './mocks';\r\n\r\nexport async function createMockResponse({\r\n  mock,\r\n  match,\r\n  url,\r\n  method,\r\n  body,\r\n  headers,\r\n}: {\r\n  mock: MockWithRegexp;\r\n  match: RegExpExecArray;\r\n  url: URL;\r\n  method: MockMethod;\r\n  body: string;\r\n  headers: Record<string, string | string[]>;\r\n}): Promise<{ body: string; status: number }> {\r\n  let status = 200;\r\n  let delay: number | undefined;\r\n  let mockError = false;\r\n  let mockHTML = false;\r\n  let responseBody = await mock.callback(\r\n    {\r\n      url: url.pathname,\r\n      method,\r\n      headers,\r\n      body: body && (JSON.parse(body) as unknown),\r\n      params: getParams(match, mock),\r\n      query: getQuery(url.searchParams),\r\n    },\r\n    {\r\n      status(statusCode: number) {\r\n        status = statusCode;\r\n      },\r\n      delay(delayMs: number) {\r\n        delay = delayMs;\r\n      },\r\n      mockError(enable: boolean) {\r\n        mockError = enable;\r\n      },\r\n      mockHTML(enable: boolean) {\r\n        mockHTML = enable;\r\n      },\r\n    }\r\n  );\r\n\r\n  if (mockError) {\r\n    responseBody = {\r\n      error: { message: \"We couldn't process your request at this time\" },\r\n    };\r\n  }\r\n\r\n  if (delay) {\r\n    await new Promise((resolve) => window.setTimeout(resolve, delay));\r\n  }\r\n\r\n  return {\r\n    body: mockHTML\r\n      ? '<html></html>'\r\n      : ((responseBody && JSON.stringify(responseBody)) as string),\r\n    status: mockError ? 500 : status,\r\n  };\r\n}\r\n\r\nexport function findMatchingMock(\r\n  url: URL,\r\n  method: string\r\n): { match: RegExpExecArray | null; mock: MockWithRegexp | null } {\r\n  const mock = getMocks()\r\n    .map((mock) => {\r\n      const keys: Key[] = [];\r\n      const regexp = pathToRegexp(mock.path, keys);\r\n\r\n      return {\r\n        regexp,\r\n        keys: keys.map((key) => key.name),\r\n        ...mock,\r\n      };\r\n    })\r\n    .find(\r\n      (mock) =>\r\n        mock.regexp.test(url.pathname) && (mock.method || 'GET') === method\r\n    ) as MockWithRegexp;\r\n  const match = mock && mock.regexp.exec(url.pathname);\r\n  return { match, mock };\r\n}\r\n\r\nfunction getParams(\r\n  match: RegExpExecArray,\r\n  mock: MockWithRegexp\r\n): Record<string, string> {\r\n  return match.reduce((acc, val, i) => {\r\n    const prop = mock.keys[i - 1];\r\n\r\n    if (!prop) {\r\n      return acc;\r\n    }\r\n\r\n    if (val !== undefined || !(prop in acc)) {\r\n      acc[prop] = val;\r\n    }\r\n\r\n    return acc;\r\n  }, {} as Record<string, string>);\r\n}\r\n\r\nfunction getQuery(\r\n  searchParams: URLSearchParams\r\n): Record<string, string | string[]> {\r\n  const query = {} as Record<string, string | string[]>;\r\n\r\n  searchParams.forEach((value, name) => {\r\n    if (Array.isArray(query[name])) {\r\n      query[name] = [...query[name], value];\r\n      return;\r\n    }\r\n\r\n    if (query[name]) {\r\n      query[name] = [query[name] as string, value];\r\n      return;\r\n    }\r\n\r\n    query[name] = value;\r\n  });\r\n  return query;\r\n}\r\n"],"sourceRoot":""}